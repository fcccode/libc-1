Microsoft (R) Macro Assembler Version 6.15.8803		    08/27/17 03:17:34
src\string.asm						     Page 1 - 1


				; ------------------------------------------------------------------
				.model tiny, c							; Small memoy model
				.386								; 80386 CPU
				include libc.inc						; Include library headers
			      C include stdio.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include string.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include ctype.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include conio.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include assert.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include stdbool.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include signal.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include time.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
 0000				.data								; Data segment
 0000  0040 [			 return_buffer BYTE 64 dup(?)					; Buffer for returning data
        00
       ]
 0040  0040 [			 strtok_buffer BYTE 64 dup(?)					; Buffer for str token data
        00
       ]
 0080  0040 [			 token_buffer BYTE 64 dup(?)					; Buffer for str token data
        00
       ]
				 include art.inc
 00C0 0F 07 0F 08 0F 09	      C penImage BYTE 0fh, 07h, 0fh, 08h, 0fh, 09h, 0fh, 0ah, 0fh, 0eh, 0fh, 0fh, 0fh, 10h, 0fh, 11h, 10h, 06h, 10h, 07h
       0F 0A 0F 0E 0F 0F
       0F 10 0F 11 10 06
       10 07
 00D4  10 08 10 09 10 0A      C 	 BYTE 10h, 08h, 10h, 09h, 10h, 0ah, 10h, 0bh, 10h, 0dh, 10h, 0eh, 10h, 0fh, 10h, 10h, 10h, 11h, 10h, 12h
       10 0B 10 0D 10 0E
       10 0F 10 10 10 11
       10 12
 00E8  11 06 11 07 11 08      C 	 BYTE 11h, 06h, 11h, 07h, 11h, 08h, 11h, 09h, 11h, 0ah, 11h, 0bh, 11h, 0dh, 11h, 0eh, 11h, 0fh, 11h, 10h
       11 09 11 0A 11 0B
       11 0D 11 0E 11 0F
       11 10
 00FC  11 11 11 12 11 13      C 	 BYTE 11h, 11h, 11h, 12h, 11h, 13h, 12h, 05h, 12h, 06h, 12h, 07h, 12h, 0ah, 12h, 0bh, 12h, 0ch, 12h, 0dh
       12 05 12 06 12 07
       12 0A 12 0B 12 0C
       12 0D
 0110  12 0E 12 11 12 12      C 	 BYTE 12h, 0eh, 12h, 11h, 12h, 12h, 12h, 13h, 13h, 05h, 13h, 06h, 13h, 0ah, 13h, 0bh, 13h, 0ch, 13h, 0dh
       12 13 13 05 13 06
       13 0A 13 0B 13 0C
       13 0D
 0124  13 12 13 13 14 05      C 	 BYTE 13h, 12h, 13h, 13h, 14h, 05h, 14h, 06h, 14h, 0bh, 14h, 0ch, 14h, 0dh, 14h, 12h, 14h, 13h, 15h, 05h
       14 06 14 0B 14 0C
       14 0D 14 12 14 13
       15 05
 0138  15 06 15 0B 15 0C      C 	 BYTE 15h, 06h, 15h, 0bh, 15h, 0ch, 15h, 0dh, 15h, 12h, 15h, 13h, 16h, 05h, 16h, 06h, 16h, 07h, 16h, 0ah
       15 0D 15 12 15 13
       16 05 16 06 16 07
       16 0A
 014C  16 0B 16 0C 16 0D      C 	 BYTE 16h, 0bh, 16h, 0ch, 16h, 0dh, 16h, 0eh, 16h, 11h, 16h, 12h, 16h, 13h, 17h, 05h, 17h, 06h, 17h, 07h
       16 0E 16 11 16 12
       16 13 17 05 17 06
       17 07
 0160  17 08 17 09 17 0A      C 	 BYTE 17h, 08h, 17h, 09h, 17h, 0ah, 17h, 0bh, 17h, 0ch, 17h, 0dh, 17h, 0eh, 17h, 0fh, 17h, 10h, 17h, 11h
       17 0B 17 0C 17 0D
       17 0E 17 0F 17 10
       17 11
 0174  17 12 18 06 18 07      C 	 BYTE 17h, 12h, 18h, 06h, 18h, 07h, 18h, 08h, 18h, 09h, 18h, 0ah, 18h, 0dh, 18h, 0eh, 18h, 0fh, 18h, 10h
       18 08 18 09 18 0A
       18 0D 18 0E 18 0F
       18 10
 0188  18 11 18 12 19 07      C 	 BYTE 18h, 11h, 18h, 12h, 19h, 07h, 19h, 08h, 19h, 09h, 19h, 0eh, 19h, 0fh, 19h, 10h, 19h, 11h, 1bh, 0ah
       19 08 19 09 19 0E
       19 0F 19 10 19 11
       1B 0A
 019C  1B 0B 1B 0E 1B 0F      C 	 BYTE 1bh, 0bh, 1bh, 0eh, 1bh, 0fh, 1ch, 0ah, 1ch, 0bh, 1ch, 0eh, 1ch, 0fh, 1dh, 0ah, 1dh, 0bh, 1dh, 0eh
       1C 0A 1C 0B 1C 0E
       1C 0F 1D 0A 1D 0B
       1D 0E
 01B0  1D 0F 1E 0A 1E 0B      C 	 BYTE 1dh, 0fh, 1eh, 0ah, 1eh, 0bh, 1eh, 0eh, 1eh, 0fh, 1fh, 0ah, 1fh, 0bh, 1fh, 0eh, 1fh, 0fh, 20h, 0ah
       1E 0E 1E 0F 1F 0A
       1F 0B 1F 0E 1F 0F
       20 0A
 01C4  20 0B 20 0E 20 0F      C 	 BYTE 20h, 0bh, 20h, 0eh, 20h, 0fh, 21h, 0ah, 21h, 0bh, 21h, 0eh, 21h, 0fh, 22h, 0ah, 22h, 0bh, 22h, 0eh
       21 0A 21 0B 21 0E
       21 0F 22 0A 22 0B
       22 0E
 01D8  22 0F 23 0A 23 0B      C 	 BYTE 22h, 0fh, 23h, 0ah, 23h, 0bh, 23h, 0eh, 23h, 0fh, 24h, 0ah, 24h, 0bh, 24h, 0eh, 24h, 0fh, 27h, 0ah
       23 0E 23 0F 24 0A
       24 0B 24 0E 24 0F
       27 0A
 01EC  27 0B 27 0E 27 0F      C 	 BYTE 27h, 0bh, 27h, 0eh, 27h, 0fh, 28h, 0ah, 28h, 0bh, 28h, 0eh, 28h, 0fh, 29h, 0ah, 29h, 0bh, 29h, 0eh
       28 0A 28 0B 28 0E
       28 0F 29 0A 29 0B
       29 0E
 0200  29 0F 2A 0A 2A 0B      C 	 BYTE 29h, 0fh, 2ah, 0ah, 2ah, 0bh, 2ah, 0eh, 2ah, 0fh, 2bh, 0ah, 2bh, 0bh, 2bh, 0eh, 2bh, 0fh, 2ch, 0ah
       2A 0E 2A 0F 2B 0A
       2B 0B 2B 0E 2B 0F
       2C 0A
 0214  2C 0B 2C 0E 2C 0F      C 	 BYTE 2ch, 0bh, 2ch, 0eh, 2ch, 0fh, 2dh, 0ah, 2dh, 0bh, 2dh, 0eh, 2dh, 0fh, 2eh, 0ah, 2eh, 0bh, 2eh, 0eh
       2D 0A 2D 0B 2D 0E
       2D 0F 2E 0A 2E 0B
       2E 0E
 0228  2E 0F 2F 0A 2F 0B      C 	 BYTE 2eh, 0fh, 2fh, 0ah, 2fh, 0bh, 2fh, 0eh, 2fh, 0fh, 30h, 0ah, 30h, 0bh, 30h, 0eh, 30h, 0fh, 34h, 05h
       2F 0E 2F 0F 30 0A
       30 0B 30 0E 30 0F
       34 05
 023C  34 06 34 07 34 08      C 	 BYTE 34h, 06h, 34h, 07h, 34h, 08h, 34h, 09h, 34h, 0ah, 34h, 0bh, 34h, 0ch, 34h, 0dh, 34h, 0eh, 34h, 0fh
       34 09 34 0A 34 0B
       34 0C 34 0D 34 0E
       34 0F
 0250  34 10 34 11 34 12      C 	 BYTE 34h, 10h, 34h, 11h, 34h, 12h, 34h, 13h, 35h, 05h, 35h, 06h, 35h, 07h, 35h, 08h, 35h, 09h, 35h, 0ah
       34 13 35 05 35 06
       35 07 35 08 35 09
       35 0A
 0264  35 0B 35 0C 35 0D      C 	 BYTE 35h, 0bh, 35h, 0ch, 35h, 0dh, 35h, 0eh, 35h, 0fh, 35h, 10h, 35h, 11h, 35h, 12h, 35h, 13h, 36h, 05h
       35 0E 35 0F 35 10
       35 11 35 12 35 13
       36 05
 0278  36 06 36 07 36 08      C 	 BYTE 36h, 06h, 36h, 07h, 36h, 08h, 36h, 09h, 36h, 0ah, 36h, 0bh, 36h, 0ch, 36h, 0dh, 36h, 0eh, 36h, 0fh
       36 09 36 0A 36 0B
       36 0C 36 0D 36 0E
       36 0F
 028C  36 10 36 11 36 12      C 	 BYTE 36h, 10h, 36h, 11h, 36h, 12h, 36h, 13h, 37h, 05h, 37h, 06h, 37h, 12h, 37h, 13h, 38h, 05h, 38h, 06h
       36 13 37 05 37 06
       37 12 37 13 38 05
       38 06
 02A0  38 12 38 13 39 05      C 	 BYTE 38h, 12h, 38h, 13h, 39h, 05h, 39h, 06h, 39h, 12h, 39h, 13h, 3ah, 05h, 3ah, 06h, 3ah, 12h, 3ah, 13h
       39 06 39 12 39 13
       3A 05 3A 06 3A 12
       3A 13
 02B4  3B 05 3B 06 3B 07      C 	 BYTE 3bh, 05h, 3bh, 06h, 3bh, 07h, 3bh, 11h, 3bh, 12h, 3bh, 13h, 3ch, 05h, 3ch, 06h, 3ch, 07h, 3ch, 11h
       3B 11 3B 12 3B 13
       3C 05 3C 06 3C 07
       3C 11
 02C8  3C 12 3D 06 3D 07      C 	 BYTE 3ch, 12h, 3dh, 06h, 3dh, 07h, 3dh, 08h, 3dh, 09h, 3dh, 0fh, 3dh, 10h, 3dh, 11h, 3dh, 12h, 3eh, 06h
       3D 08 3D 09 3D 0F
       3D 10 3D 11 3D 12
       3E 06
 02DC  3E 07 3E 08 3E 09      C 	 BYTE 3eh, 07h, 3eh, 08h, 3eh, 09h, 3eh, 0ah, 3eh, 0bh, 3eh, 0ch, 3eh, 0dh, 3eh, 0eh, 3eh, 0fh, 3eh, 10h
       3E 0A 3E 0B 3E 0C
       3E 0D 3E 0E 3E 0F
       3E 10
 02F0  3E 11 3F 07 3F 08      C 	 BYTE 3eh, 11h, 3fh, 07h, 3fh, 08h, 3fh, 09h, 3fh, 0ah, 3fh, 0bh, 3fh, 0ch, 3fh, 0dh, 3fh, 0eh, 3fh, 0fh
       3F 09 3F 0A 3F 0B
       3F 0C 3F 0D 3F 0E
       3F 0F
 0304  3F 10 40 09 40 0A      C 	 BYTE 3fh, 10h, 40h, 09h, 40h, 0ah, 40h, 0bh, 40h, 0ch, 40h, 0dh, 40h, 0eh, 40h, 0fh
       40 0B 40 0C 40 0D
       40 0E 40 0F
 = 012A			      C 	 penSize EQU 12ah
			      C 
 0314 1E 0A 07 1E 0B 04	      C derpImage BYTE 1eh, 0ah, 07h, 1eh, 0bh, 04h, 1eh, 0ch, 08h, 1eh, 0dh, 09h, 1eh, 0eh, 01h, 1eh, 0fh, 0bh, 1eh, 10h
       1E 0C 08 1E 0D 09
       1E 0E 01 1E 0F 0B
       1E 10
 0328  08 1E 11 02 1E 12      C 	 BYTE 08h, 1eh, 11h, 02h, 1eh, 12h, 01h, 1fh, 07h, 09h, 1fh, 08h, 0ch, 1fh, 09h, 0dh, 1fh, 0ah, 0eh, 1fh
       01 1F 07 09 1F 08
       0C 1F 09 0D 1F 0A
       0E 1F
 033C  12 02 1F 13 01 1F      C 	 BYTE 12h, 02h, 1fh, 13h, 01h, 1fh, 14h, 0ah, 1fh, 15h, 0bh, 20h, 06h, 04h, 20h, 07h, 0bh, 20h, 15h, 0ch
       14 0A 1F 15 0B 20
       06 04 20 07 0B 20
       15 0C
 0350  20 16 01 21 05 08      C 	 BYTE 20h, 16h, 01h, 21h, 05h, 08h, 21h, 06h, 0ah, 21h, 09h, 05h, 21h, 0ah, 0ch, 21h, 0bh, 05h, 21h, 0ch
       21 06 0A 21 09 05
       21 0A 0C 21 0B 05
       21 0C
 0364  03 21 15 0D 21 16      C 	 BYTE 03h, 21h, 15h, 0dh, 21h, 16h, 0eh, 21h, 17h, 04h, 22h, 04h, 03h, 22h, 05h, 06h, 22h, 08h, 0bh, 22h
       0E 21 17 04 22 04
       03 22 05 06 22 08
       0B 22
 0378  09 08 22 0A 08 22      C 	 BYTE 09h, 08h, 22h, 0ah, 08h, 22h, 0bh, 0eh, 22h, 0dh, 04h, 22h, 17h, 0bh, 23h, 03h, 08h, 23h, 04h, 05h
       0B 0E 22 0D 04 22
       17 0B 23 03 08 23
       04 05
 038C  23 07 02 23 09 07      C 	 BYTE 23h, 07h, 02h, 23h, 09h, 07h, 23h, 0ah, 05h, 23h, 0bh, 01h, 23h, 0dh, 07h, 23h, 17h, 08h, 24h, 02h
       23 0A 05 23 0B 01
       23 0D 07 23 17 08
       24 02
 03A0  09 24 03 08 24 07      C 	 BYTE 09h, 24h, 03h, 08h, 24h, 07h, 06h, 24h, 0dh, 0ch, 25h, 01h, 06h, 25h, 02h, 0bh, 25h, 07h, 0bh, 25h
       06 24 0D 0C 25 01
       06 25 02 0B 25 07
       0B 25
 03B4  0D 08 26 01 05 26      C 	 BYTE 0dh, 08h, 26h, 01h, 05h, 26h, 02h, 01h, 26h, 08h, 06h, 26h, 0ch, 05h, 26h, 0fh, 02h, 26h, 10h, 0ch
       02 01 26 08 06 26
       0C 05 26 0F 02 26
       10 0C
 03C8  27 00 06 27 01 03      C 	 BYTE 27h, 00h, 06h, 27h, 01h, 03h, 27h, 02h, 0ah, 27h, 09h, 0ch, 27h, 0ah, 0ch, 27h, 0bh, 02h, 27h, 0fh
       27 02 0A 27 09 0C
       27 0A 0C 27 0B 02
       27 0F
 03DC  01 27 10 06 27 11      C 	 BYTE 01h, 27h, 10h, 06h, 27h, 11h, 03h, 28h, 00h, 05h, 28h, 01h, 0dh, 28h, 0fh, 03h, 28h, 10h, 0bh, 28h
       03 28 00 05 28 01
       0D 28 0F 03 28 10
       0B 28
 03F0  11 07 28 12 0D 28      C 	 BYTE 11h, 07h, 28h, 12h, 0dh, 28h, 13h, 06h, 29h, 00h, 05h, 29h, 01h, 08h, 29h, 0fh, 0bh, 29h, 10h, 09h
       13 06 29 00 05 29
       01 08 29 0F 0B 29
       10 09
 0404  29 13 0E 29 14 02      C 	 BYTE 29h, 13h, 0eh, 29h, 14h, 02h, 2ah, 00h, 0eh, 2ah, 01h, 02h, 2ah, 07h, 04h, 2ah, 08h, 04h, 2ah, 09h
       2A 00 0E 2A 01 02
       2A 07 04 2A 08 04
       2A 09
 0418  03 2A 13 0B 2A 14      C 	 BYTE 03h, 2ah, 13h, 0bh, 2ah, 14h, 05h, 2bh, 00h, 02h, 2bh, 01h, 05h, 2bh, 06h, 05h, 2bh, 09h, 09h, 2bh
       05 2B 00 02 2B 01
       05 2B 06 05 2B 09
       09 2B
 042C  0A 03 2B 13 0C 2B      C 	 BYTE 0ah, 03h, 2bh, 13h, 0ch, 2bh, 14h, 0ch, 2ch, 00h, 02h, 2ch, 01h, 07h, 2ch, 05h, 07h, 2ch, 0ah, 06h
       14 0C 2C 00 02 2C
       01 07 2C 05 07 2C
       0A 06
 0440  2C 0B 0B 2C 0E 04      C 	 BYTE 2ch, 0bh, 0bh, 2ch, 0eh, 04h, 2ch, 0fh, 01h, 2ch, 13h, 01h, 2ch, 14h, 0dh, 2dh, 01h, 0ch, 2dh, 05h
       2C 0F 01 2C 13 01
       2C 14 0D 2D 01 0C
       2D 05
 0454  0C 2D 0B 01 2D 0E      C 	 BYTE 0ch, 2dh, 0bh, 01h, 2dh, 0eh, 0eh, 2dh, 0fh, 0eh, 2dh, 10h, 02h, 2dh, 11h, 03h, 2dh, 12h, 0ah, 2dh
       0E 2D 0F 0E 2D 10
       02 2D 11 03 2D 12
       0A 2D
 0468  13 02 2D 14 05 2E      C 	 BYTE 13h, 02h, 2dh, 14h, 05h, 2eh, 01h, 05h, 2eh, 02h, 01h, 2eh, 05h, 09h, 2eh, 06h, 05h, 2eh, 07h, 0eh
       01 05 2E 02 01 2E
       05 09 2E 06 05 2E
       07 0E
 047C  2E 0B 03 2E 0E 0D      C 	 BYTE 2eh, 0bh, 03h, 2eh, 0eh, 0dh, 2eh, 0fh, 06h, 2eh, 10h, 05h, 2eh, 11h, 0bh, 2eh, 12h, 02h, 2eh, 13h
       2E 0F 06 2E 10 05
       2E 11 0B 2E 12 02
       2E 13
 0490  09 2F 02 07 2F 03      C 	 BYTE 09h, 2fh, 02h, 07h, 2fh, 03h, 03h, 2fh, 06h, 04h, 2fh, 07h, 04h, 2fh, 0bh, 09h, 30h, 03h, 02h, 30h
       03 2F 06 04 2F 07
       04 2F 0B 09 30 03
       02 30
 04A4  04 0A 30 08 01 30      C 	 BYTE 04h, 0ah, 30h, 08h, 01h, 30h, 0ah, 03h, 30h, 0bh, 09h, 31h, 04h, 0eh, 31h, 05h, 0dh, 31h, 06h, 09h
       0A 03 30 0B 09 31
       04 0E 31 05 0D 31
       06 09
 04B8  31 09 0C 31 0A 09      C 	 BYTE 31h, 09h, 0ch, 31h, 0ah, 09h, 32h, 06h, 04h, 32h, 07h, 08h, 32h, 08h, 0ah, 32h, 17h, 0dh, 33h, 08h
       32 06 04 32 07 08
       32 08 0A 32 17 0D
       33 08
 04CC  06 33 09 07 33 0A      C 	 BYTE 06h, 33h, 09h, 07h, 33h, 0ah, 0ah, 33h, 0bh, 0ah, 33h, 0ch, 08h, 33h, 0dh, 07h, 33h, 0eh, 08h, 33h
       0A 33 0B 0A 33 0C
       08 33 0D 07 33 0E
       08 33
 04E0  0F 04 33 10 0B 33      C 	 BYTE 0fh, 04h, 33h, 10h, 0bh, 33h, 11h, 0ah, 33h, 14h, 07h, 33h, 15h, 01h, 33h, 16h, 09h, 33h, 17h, 01h
       11 0A 33 14 07 33
       15 01 33 16 09 33
       17 01
 04F4  34 0B 0A 34 0C 08      C 	 BYTE 34h, 0bh, 0ah, 34h, 0ch, 08h, 34h, 0dh, 0dh, 34h, 0eh, 0dh, 34h, 0fh, 01h, 34h, 10h, 02h, 34h, 11h
       34 0D 0D 34 0E 0D
       34 0F 01 34 10 02
       34 11
 0508  0E 34 12 04 34 13      C 	 BYTE 0eh, 34h, 12h, 04h, 34h, 13h, 03h, 34h, 14h, 04h
       03 34 14 04
 = 00FF			      C 	 derpSize EQU 00ffh
			      C 
 0512 08 05 02 08 06 0D	      C memesImage BYTE 08h, 05h, 02h, 08h, 06h, 0dh, 08h, 07h, 09h, 08h, 08h, 05h, 08h, 09h, 0dh, 08h, 0ah, 08h, 08h, 0bh
       08 07 09 08 08 05
       08 09 0D 08 0A 08
       08 0B
 0526  08 08 0C 06 08 0D      C 	 BYTE 08h, 08h, 0ch, 06h, 08h, 0dh, 03h, 08h, 0eh, 0bh, 08h, 0fh, 02h, 08h, 10h, 06h, 08h, 11h, 03h, 09h
       03 08 0E 0B 08 0F
       02 08 10 06 08 11
       03 09
 053A  05 08 09 06 05 09      C 	 BYTE 05h, 08h, 09h, 06h, 05h, 09h, 07h, 05h, 09h, 08h, 0dh, 09h, 09h, 07h, 09h, 0ah, 0bh, 09h, 0bh, 04h
       07 05 09 08 0D 09
       09 07 09 0A 0B 09
       0B 04
 054E  09 0C 03 09 0D 0C      C 	 BYTE 09h, 0ch, 03h, 09h, 0dh, 0ch, 09h, 0eh, 07h, 09h, 0fh, 0bh, 09h, 10h, 03h, 09h, 11h, 07h, 0ah, 05h
       09 0E 07 09 0F 0B
       09 10 03 09 11 07
       0A 05
 0562  09 0A 06 05 0A 07      C 	 BYTE 09h, 0ah, 06h, 05h, 0ah, 07h, 03h, 0ah, 08h, 02h, 0ah, 09h, 03h, 0ah, 0ah, 04h, 0ah, 0bh, 03h, 0ah
       03 0A 08 02 0A 09
       03 0A 0A 04 0A 0B
       03 0A
 0576  0C 0E 0A 0D 0E 0A      C 	 BYTE 0ch, 0eh, 0ah, 0dh, 0eh, 0ah, 0eh, 08h, 0ah, 0fh, 06h, 0ah, 10h, 0bh, 0ah, 11h, 0bh, 0bh, 05h, 05h
       0E 08 0A 0F 06 0A
       10 0B 0A 11 0B 0B
       05 05
 058A  0B 06 09 0B 07 0B      C 	 BYTE 0bh, 06h, 09h, 0bh, 07h, 0bh, 0bh, 08h, 0eh, 0ch, 05h, 08h, 0ch, 06h, 0ch, 0ch, 07h, 0eh, 0ch, 08h
       0B 08 0E 0C 05 08
       0C 06 0C 0C 07 0E
       0C 08
 059E  02 0C 09 0A 0C 0A      C 	 BYTE 02h, 0ch, 09h, 0ah, 0ch, 0ah, 05h, 0ch, 0bh, 06h, 0dh, 07h, 08h, 0dh, 08h, 07h, 0dh, 09h, 09h, 0dh
       05 0C 0B 06 0D 07
       08 0D 08 07 0D 09
       09 0D
 05B2  0A 02 0D 0B 06 0D      C 	 BYTE 0ah, 02h, 0dh, 0bh, 06h, 0dh, 0ch, 08h, 0dh, 0dh, 02h, 0dh, 0eh, 0ah, 0dh, 0fh, 09h, 0eh, 0bh, 05h
       0C 08 0D 0D 02 0D
       0E 0A 0D 0F 09 0E
       0B 05
 05C6  0E 0C 01 0E 0D 03      C 	 BYTE 0eh, 0ch, 01h, 0eh, 0dh, 03h, 0eh, 0eh, 05h, 0eh, 0fh, 05h, 0eh, 10h, 06h, 0eh, 11h, 04h, 0fh, 0eh
       0E 0E 05 0E 0F 05
       0E 10 06 0E 11 04
       0F 0E
 05DA  0B 0F 0F 08 0F 10      C 	 BYTE 0bh, 0fh, 0fh, 08h, 0fh, 10h, 03h, 0fh, 11h, 01h, 10h, 0bh, 0ch, 10h, 0ch, 0ah, 10h, 0dh, 05h, 10h
       03 0F 11 01 10 0B
       0C 10 0C 0A 10 0D
       05 10
 05EE  0E 0A 10 0F 01 10      C 	 BYTE 0eh, 0ah, 10h, 0fh, 01h, 10h, 10h, 03h, 10h, 11h, 0bh, 11h, 08h, 05h, 11h, 09h, 02h, 11h, 0ah, 01h
       10 03 10 11 0B 11
       08 05 11 09 02 11
       0A 01
 0602  11 0B 06 11 0C 09      C 	 BYTE 11h, 0bh, 06h, 11h, 0ch, 09h, 11h, 0dh, 0eh, 11h, 0eh, 01h, 12h, 05h, 0dh, 12h, 06h, 0eh, 12h, 07h
       11 0D 0E 11 0E 01
       12 05 0D 12 06 0E
       12 07
 0616  07 12 08 0D 12 09      C 	 BYTE 07h, 12h, 08h, 0dh, 12h, 09h, 03h, 12h, 0ah, 0ah, 12h, 0bh, 06h, 13h, 05h, 09h, 13h, 06h, 08h, 13h
       03 12 0A 0A 12 0B
       06 13 05 09 13 06
       08 13
 062A  07 07 13 08 06 14      C 	 BYTE 07h, 07h, 13h, 08h, 06h, 14h, 05h, 0eh, 14h, 06h, 02h, 14h, 07h, 0eh, 14h, 08h, 03h, 14h, 09h, 08h
       05 0E 14 06 02 14
       07 0E 14 08 03 14
       09 08
 063E  14 0A 04 14 0B 0B      C 	 BYTE 14h, 0ah, 04h, 14h, 0bh, 0bh, 14h, 0ch, 0bh, 14h, 0dh, 03h, 14h, 0eh, 05h, 14h, 0fh, 02h, 14h, 10h
       14 0C 0B 14 0D 03
       14 0E 05 14 0F 02
       14 10
 0652  0E 14 11 04 15 05      C 	 BYTE 0eh, 14h, 11h, 04h, 15h, 05h, 02h, 15h, 06h, 08h, 15h, 07h, 07h, 15h, 08h, 01h, 15h, 09h, 08h, 15h
       02 15 06 08 15 07
       07 15 08 01 15 09
       08 15
 0666  0A 03 15 0B 0A 15      C 	 BYTE 0ah, 03h, 15h, 0bh, 0ah, 15h, 0ch, 0ch, 15h, 0dh, 02h, 15h, 0eh, 03h, 15h, 0fh, 05h, 15h, 10h, 0dh
       0C 0C 15 0D 02 15
       0E 03 15 0F 05 15
       10 0D
 067A  15 11 0B 16 05 0D      C 	 BYTE 15h, 11h, 0bh, 16h, 05h, 0dh, 16h, 06h, 0dh, 16h, 07h, 05h, 16h, 08h, 07h, 16h, 09h, 02h, 16h, 0ah
       16 06 0D 16 07 05
       16 08 07 16 09 02
       16 0A
 068E  02 16 0B 07 16 0C      C 	 BYTE 02h, 16h, 0bh, 07h, 16h, 0ch, 09h, 16h, 0dh, 08h, 16h, 0eh, 0eh, 16h, 0fh, 0dh, 16h, 10h, 0bh, 16h
       09 16 0D 08 16 0E
       0E 16 0F 0D 16 10
       0B 16
 06A2  11 02 1A 05 05 1A      C 	 BYTE 11h, 02h, 1ah, 05h, 05h, 1ah, 06h, 08h, 1ah, 07h, 0dh, 1ah, 08h, 04h, 1ah, 09h, 05h, 1ah, 0ah, 0dh
       06 08 1A 07 0D 1A
       08 04 1A 09 05 1A
       0A 0D
 06B6  1A 0B 0C 1A 0C 0D      C 	 BYTE 1ah, 0bh, 0ch, 1ah, 0ch, 0dh, 1ah, 0dh, 09h, 1ah, 0eh, 0bh, 1ah, 0fh, 0ch, 1ah, 10h, 07h, 1ah, 11h
       1A 0D 09 1A 0E 0B
       1A 0F 0C 1A 10 07
       1A 11
 06CA  02 1B 05 0A 1B 06      C 	 BYTE 02h, 1bh, 05h, 0ah, 1bh, 06h, 03h, 1bh, 07h, 04h, 1bh, 08h, 0ah, 1bh, 09h, 04h, 1bh, 0ah, 07h, 1bh
       03 1B 07 04 1B 08
       0A 1B 09 04 1B 0A
       07 1B
 06DE  0B 08 1B 0C 02 1B      C 	 BYTE 0bh, 08h, 1bh, 0ch, 02h, 1bh, 0dh, 0bh, 1bh, 0eh, 01h, 1bh, 0fh, 08h, 1bh, 10h, 04h, 1bh, 11h, 0bh
       0D 0B 1B 0E 01 1B
       0F 08 1B 10 04 1B
       11 0B
 06F2  1C 05 03 1C 06 0A      C 	 BYTE 1ch, 05h, 03h, 1ch, 06h, 0ah, 1ch, 07h, 05h, 1ch, 08h, 01h, 1ch, 09h, 0bh, 1ch, 0ah, 05h, 1ch, 0bh
       1C 07 05 1C 08 01
       1C 09 0B 1C 0A 05
       1C 0B
 0706  04 1C 0C 06 1C 0D      C 	 BYTE 04h, 1ch, 0ch, 06h, 1ch, 0dh, 02h, 1ch, 0eh, 0eh, 1ch, 0fh, 0ah, 1ch, 10h, 0ch, 1ch, 11h, 04h, 1dh
       02 1C 0E 0E 1C 0F
       0A 1C 10 0C 1C 11
       04 1D
 071A  05 0C 1D 06 03 1D      C 	 BYTE 05h, 0ch, 1dh, 06h, 03h, 1dh, 0ah, 06h, 1dh, 0bh, 0ch, 1dh, 10h, 0bh, 1dh, 11h, 0eh, 1eh, 05h, 07h
       0A 06 1D 0B 0C 1D
       10 0B 1D 11 0E 1E
       05 07
 072E  1E 06 02 1E 0A 0E      C 	 BYTE 1eh, 06h, 02h, 1eh, 0ah, 0eh, 1eh, 0bh, 01h, 1eh, 10h, 0bh, 1eh, 11h, 05h, 1fh, 05h, 08h, 1fh, 06h
       1E 0B 01 1E 10 0B
       1E 11 05 1F 05 08
       1F 06
 0742  0D 1F 0A 02 1F 0B      C 	 BYTE 0dh, 1fh, 0ah, 02h, 1fh, 0bh, 02h, 1fh, 10h, 0eh, 1fh, 11h, 01h, 20h, 05h, 0dh, 20h, 06h, 0bh, 20h
       02 1F 10 0E 1F 11
       01 20 05 0D 20 06
       0B 20
 0756  0A 07 20 0B 06 20      C 	 BYTE 0ah, 07h, 20h, 0bh, 06h, 20h, 10h, 04h, 20h, 11h, 04h, 21h, 05h, 0ah, 21h, 06h, 05h, 21h, 10h, 01h
       10 04 20 11 04 21
       05 0A 21 06 05 21
       10 01
 076A  21 11 08 24 05 04      C 	 BYTE 21h, 11h, 08h, 24h, 05h, 04h, 24h, 06h, 07h, 24h, 07h, 03h, 24h, 08h, 0bh, 24h, 09h, 09h, 24h, 0ah
       24 06 07 24 07 03
       24 08 0B 24 09 09
       24 0A
 077E  0C 24 0B 02 24 0C      C 	 BYTE 0ch, 24h, 0bh, 02h, 24h, 0ch, 04h, 24h, 0dh, 08h, 24h, 0eh, 0ah, 24h, 0fh, 08h, 24h, 10h, 0ah, 24h
       04 24 0D 08 24 0E
       0A 24 0F 08 24 10
       0A 24
 0792  11 09 25 05 07 25      C 	 BYTE 11h, 09h, 25h, 05h, 07h, 25h, 06h, 0bh, 25h, 07h, 0bh, 25h, 08h, 04h, 25h, 09h, 05h, 25h, 0ah, 0bh
       06 0B 25 07 0B 25
       08 04 25 09 05 25
       0A 0B
 07A6  25 0B 04 25 0C 05      C 	 BYTE 25h, 0bh, 04h, 25h, 0ch, 05h, 25h, 0dh, 02h, 25h, 0eh, 04h, 25h, 0fh, 0bh, 25h, 10h, 06h, 25h, 11h
       25 0D 02 25 0E 04
       25 0F 0B 25 10 06
       25 11
 07BA  02 26 05 0B 26 06      C 	 BYTE 02h, 26h, 05h, 0bh, 26h, 06h, 03h, 26h, 07h, 08h, 26h, 08h, 02h, 26h, 09h, 03h, 26h, 0ah, 0ch, 26h
       03 26 07 08 26 08
       02 26 09 03 26 0A
       0C 26
 07CE  0B 0E 26 0C 0D 26      C 	 BYTE 0bh, 0eh, 26h, 0ch, 0dh, 26h, 0dh, 0ch, 26h, 0eh, 0ah, 26h, 0fh, 08h, 26h, 10h, 0eh, 26h, 11h, 03h
       0D 0C 26 0E 0A 26
       0F 08 26 10 0E 26
       11 03
 07E2  27 05 07 27 06 0C      C 	 BYTE 27h, 05h, 07h, 27h, 06h, 0ch, 27h, 07h, 06h, 27h, 08h, 02h, 28h, 05h, 03h, 28h, 06h, 08h, 28h, 07h
       27 07 06 27 08 02
       28 05 03 28 06 08
       28 07
 07F6  01 28 08 0A 28 09      C 	 BYTE 01h, 28h, 08h, 0ah, 28h, 09h, 08h, 28h, 0ah, 0ah, 28h, 0bh, 01h, 29h, 07h, 0dh, 29h, 08h, 0ch, 29h
       08 28 0A 0A 28 0B
       01 29 07 0D 29 08
       0C 29
 080A  09 0E 29 0A 0C 29      C 	 BYTE 09h, 0eh, 29h, 0ah, 0ch, 29h, 0bh, 09h, 29h, 0ch, 08h, 29h, 0dh, 08h, 29h, 0eh, 08h, 29h, 0fh, 08h
       0B 09 29 0C 08 29
       0D 08 29 0E 08 29
       0F 08
 081E  2A 0B 0E 2A 0C 06      C 	 BYTE 2ah, 0bh, 0eh, 2ah, 0ch, 06h, 2ah, 0dh, 04h, 2ah, 0eh, 01h, 2ah, 0fh, 02h, 2ah, 10h, 03h, 2ah, 11h
       2A 0D 04 2A 0E 01
       2A 0F 02 2A 10 03
       2A 11
 0832  02 2B 0E 07 2B 0F      C 	 BYTE 02h, 2bh, 0eh, 07h, 2bh, 0fh, 08h, 2bh, 10h, 06h, 2bh, 11h, 03h, 2ch, 0bh, 0bh, 2ch, 0ch, 04h, 2ch
       08 2B 10 06 2B 11
       03 2C 0B 0B 2C 0C
       04 2C
 0846  0D 06 2C 0E 09 2C      C 	 BYTE 0dh, 06h, 2ch, 0eh, 09h, 2ch, 0fh, 01h, 2ch, 10h, 02h, 2ch, 11h, 05h, 2dh, 08h, 07h, 2dh, 09h, 0bh
       0F 01 2C 10 02 2C
       11 05 2D 08 07 2D
       09 0B
 085A  2D 0A 0A 2D 0B 0A      C 	 BYTE 2dh, 0ah, 0ah, 2dh, 0bh, 0ah, 2dh, 0ch, 0eh, 2dh, 0dh, 01h, 2dh, 0eh, 05h, 2eh, 05h, 09h, 2eh, 06h
       2D 0C 0E 2D 0D 01
       2D 0E 05 2E 05 09
       2E 06
 086E  07 2E 07 01 2E 08      C 	 BYTE 07h, 2eh, 07h, 01h, 2eh, 08h, 03h, 2eh, 09h, 01h, 2eh, 0ah, 0ch, 2eh, 0bh, 0dh, 2fh, 05h, 08h, 2fh
       03 2E 09 01 2E 0A
       0C 2E 0B 0D 2F 05
       08 2F
 0882  06 04 2F 07 0D 2F      C 	 BYTE 06h, 04h, 2fh, 07h, 0dh, 2fh, 08h, 0eh, 30h, 05h, 02h, 30h, 06h, 08h, 30h, 07h, 03h, 30h, 08h, 01h
       08 0E 30 05 02 30
       06 08 30 07 03 30
       08 01
 0896  30 09 0C 30 0A 05      C 	 BYTE 30h, 09h, 0ch, 30h, 0ah, 05h, 30h, 0bh, 02h, 30h, 0ch, 04h, 30h, 0dh, 0eh, 30h, 0eh, 0ch, 30h, 0fh
       30 0B 02 30 0C 04
       30 0D 0E 30 0E 0C
       30 0F
 08AA  09 30 10 01 30 11      C 	 BYTE 09h, 30h, 10h, 01h, 30h, 11h, 0dh, 31h, 05h, 08h, 31h, 06h, 05h, 31h, 07h, 09h, 31h, 08h, 04h, 31h
       0D 31 05 08 31 06
       05 31 07 09 31 08
       04 31
 08BE  09 0A 31 0A 0C 31      C 	 BYTE 09h, 0ah, 31h, 0ah, 0ch, 31h, 0bh, 03h, 31h, 0ch, 02h, 31h, 0dh, 0eh, 31h, 0eh, 08h, 31h, 0fh, 03h
       0B 03 31 0C 02 31
       0D 0E 31 0E 08 31
       0F 03
 08D2  31 10 0C 31 11 0E      C 	 BYTE 31h, 10h, 0ch, 31h, 11h, 0eh, 32h, 05h, 0eh, 32h, 06h, 05h, 32h, 07h, 02h, 32h, 08h, 01h, 32h, 09h
       32 05 0E 32 06 05
       32 07 02 32 08 01
       32 09
 08E6  0B 32 0A 01 32 0B      C 	 BYTE 0bh, 32h, 0ah, 01h, 32h, 0bh, 02h, 32h, 0ch, 07h, 32h, 0dh, 0ch, 32h, 0eh, 01h, 32h, 0fh, 0eh, 32h
       02 32 0C 07 32 0D
       0C 32 0E 01 32 0F
       0E 32
 08FA  10 08 32 11 07 36      C 	 BYTE 10h, 08h, 32h, 11h, 07h, 36h, 05h, 0eh, 36h, 06h, 06h, 36h, 07h, 04h, 36h, 08h, 09h, 36h, 09h, 03h
       05 0E 36 06 06 36
       07 04 36 08 09 36
       09 03
 090E  36 0A 01 36 0B 0A      C 	 BYTE 36h, 0ah, 01h, 36h, 0bh, 0ah, 36h, 0ch, 0bh, 36h, 0dh, 0eh, 36h, 0eh, 09h, 36h, 0fh, 07h, 36h, 10h
       36 0C 0B 36 0D 0E
       36 0E 09 36 0F 07
       36 10
 0922  0B 36 11 0E 37 05      C 	 BYTE 0bh, 36h, 11h, 0eh, 37h, 05h, 0dh, 37h, 06h, 03h, 37h, 07h, 0bh, 37h, 08h, 04h, 37h, 09h, 01h, 37h
       0D 37 06 03 37 07
       0B 37 08 04 37 09
       01 37
 0936  0A 09 37 0B 0D 37      C 	 BYTE 0ah, 09h, 37h, 0bh, 0dh, 37h, 0ch, 02h, 37h, 0dh, 09h, 37h, 0eh, 02h, 37h, 0fh, 09h, 37h, 10h, 07h
       0C 02 37 0D 09 37
       0E 02 37 0F 09 37
       10 07
 094A  37 11 07 38 05 05      C 	 BYTE 37h, 11h, 07h, 38h, 05h, 05h, 38h, 06h, 03h, 38h, 07h, 04h, 38h, 08h, 0eh, 38h, 09h, 05h, 38h, 0ah
       38 06 03 38 07 04
       38 08 0E 38 09 05
       38 0A
 095E  08 38 0B 05 38 0C      C 	 BYTE 08h, 38h, 0bh, 05h, 38h, 0ch, 0eh, 38h, 0dh, 05h, 38h, 0eh, 03h, 38h, 0fh, 0eh, 38h, 10h, 07h, 38h
       0E 38 0D 05 38 0E
       03 38 0F 0E 38 10
       07 38
 0972  11 02 39 05 03 39      C 	 BYTE 11h, 02h, 39h, 05h, 03h, 39h, 06h, 0ch, 39h, 0ah, 0eh, 39h, 0bh, 02h, 39h, 10h, 08h, 39h, 11h, 03h
       06 0C 39 0A 0E 39
       0B 02 39 10 08 39
       11 03
 0986  3A 05 07 3A 06 0B      C 	 BYTE 3ah, 05h, 07h, 3ah, 06h, 0bh, 3ah, 0ah, 04h, 3ah, 0bh, 0eh, 3ah, 10h, 0bh, 3ah, 11h, 0ch, 3bh, 05h
       3A 0A 04 3A 0B 0E
       3A 10 0B 3A 11 0C
       3B 05
 099A  01 3B 06 0A 3B 0A      C 	 BYTE 01h, 3bh, 06h, 0ah, 3bh, 0ah, 0bh, 3bh, 0bh, 0bh, 3bh, 10h, 07h, 3bh, 11h, 07h, 3ch, 05h, 0dh, 3ch
       0B 3B 0B 0B 3B 10
       07 3B 11 07 3C 05
       0D 3C
 09AE  06 08 3C 0A 0B 3C      C 	 BYTE 06h, 08h, 3ch, 0ah, 0bh, 3ch, 0bh, 04h, 3ch, 10h, 06h, 3ch, 11h, 07h, 3dh, 05h, 08h, 3dh, 06h, 07h
       0B 04 3C 10 06 3C
       11 07 3D 05 08 3D
       06 07
 09C2  3D 10 06 3D 11 0C      C 	 BYTE 3dh, 10h, 06h, 3dh, 11h, 0ch, 40h, 07h, 07h, 40h, 08h, 09h, 40h, 09h, 05h, 40h, 0fh, 07h, 40h, 10h
       40 07 07 40 08 09
       40 09 05 40 0F 07
       40 10
 09D6  0B 41 06 08 41 07      C 	 BYTE 0bh, 41h, 06h, 08h, 41h, 07h, 0bh, 41h, 08h, 0dh, 41h, 09h, 0dh, 41h, 0ah, 01h, 41h, 0fh, 01h, 41h
       0B 41 08 0D 41 09
       0D 41 0A 01 41 0F
       01 41
 09EA  10 01 41 11 0E 42      C 	 BYTE 10h, 01h, 41h, 11h, 0eh, 42h, 05h, 03h, 42h, 06h, 0eh, 42h, 07h, 0dh, 42h, 08h, 01h, 42h, 09h, 02h
       05 03 42 06 0E 42
       07 0D 42 08 01 42
       09 02
 09FE  42 0A 09 42 0B 02      C 	 BYTE 42h, 0ah, 09h, 42h, 0bh, 02h, 42h, 10h, 05h, 42h, 11h, 05h, 43h, 05h, 0ch, 43h, 06h, 07h, 43h, 09h
       42 10 05 42 11 05
       43 05 0C 43 06 07
       43 09
 0A12  09 43 0A 09 43 0B      C 	 BYTE 09h, 43h, 0ah, 09h, 43h, 0bh, 08h, 43h, 10h, 0ah, 43h, 11h, 09h, 44h, 05h, 08h, 44h, 06h, 0bh, 44h
       08 43 10 0A 43 11
       09 44 05 08 44 06
       0B 44
 0A26  0A 09 44 0B 0A 44      C 	 BYTE 0ah, 09h, 44h, 0bh, 0ah, 44h, 0ch, 09h, 44h, 10h, 05h, 44h, 11h, 0ch, 45h, 05h, 0dh, 45h, 06h, 07h
       0C 09 44 10 05 44
       11 0C 45 05 0D 45
       06 07
 0A3A  45 0A 0B 45 0B 0B      C 	 BYTE 45h, 0ah, 0bh, 45h, 0bh, 0bh, 45h, 0ch, 01h, 45h, 0fh, 02h, 45h, 10h, 01h, 45h, 11h, 0ch, 46h, 05h
       45 0C 01 45 0F 02
       45 10 01 45 11 0C
       46 05
 0A4E  02 46 06 01 46 0B      C 	 BYTE 02h, 46h, 06h, 01h, 46h, 0bh, 05h, 46h, 0ch, 03h, 46h, 0dh, 03h, 46h, 0eh, 09h, 46h, 0fh, 08h, 46h
       05 46 0C 03 46 0D
       03 46 0E 09 46 0F
       08 46
 0A62  10 0A 46 11 07 47      C 	 BYTE 10h, 0ah, 46h, 11h, 07h, 47h, 06h, 0ah, 47h, 07h, 07h, 47h, 0bh, 02h, 47h, 0ch, 07h, 47h, 0dh, 0ch
       06 0A 47 07 07 47
       0B 02 47 0C 07 47
       0D 0C
 0A76  47 0E 0D 47 0F 08      C 	 BYTE 47h, 0eh, 0dh, 47h, 0fh, 08h, 47h, 10h, 0eh, 48h, 0ch, 0eh, 48h, 0dh, 08h, 48h, 0eh, 08h, 48h, 0fh
       47 10 0E 48 0C 0E
       48 0D 08 48 0E 08
       48 0F
 0A8A  06		      C 	 BYTE 06h
 = 02BC			      C 	 memesSize EQU 02bch
			      C 
 0000				 .code
				; ------------------------------------------------------------------

				clearBuff MACRO arg
				    push di
				    push cx
				    push ax
				    cld
				    mov di, offset arg
				    mov cx, sizeof arg						; Repeat for the length of the buffer
				    mov al, 0							; Clear with null (0)
				    rep stosb
				    pop di
				    pop cx
				    pop ax
				ENDM


 0000				plotImage PROC
 0000  B9 02BC			    mov cx, memesSize
 0003  BE 0512 R		    mov si, offset memesImage
 0006  33 C0			    xor ax, ax
 0008  33 DB			    xor bx, bx
 000A				  @@:
 000A  8B 04			    mov ax, [si]
 000C  46			    inc si
 000D  8B 1C			    mov bx, [si]
 000F  46			    inc si
 0010  53			    push bx
 0011  50			    push ax
 0012  E8 0000 E		    call gotoxy
 0015  58			    pop ax
 0016  5B			    pop bx
 0017  60			    pusha
 0018  8A 1C			    mov bl, [si]
 001A  B9 0001			    mov	cx, 1
 001D  B7 00			    mov bh, 00 ; page | color
 001F  B8 0920			    mov	ax, 0920h ; int | char
 0022  CD 10			    int	    10h
 0024  B8 0EDB			    mov ax, 0edbh  ; int | char
 0027  CD 10			    int	    10h							; Video interupt
 0029  61			    popa
 002A  46			    inc si
 002B  E2 DD			  loop @b

 002D  C3			    ret
 002E				plotImage ENDP
				; ------------------------------------------------------------------
				; int strcmp(const char *str1, const char *str2)
				; ------------------------------------------------------------------
				; Compares the string pointed to, by str1 to the string
				; pointed to by str2.

 002E				strcmp PROC uses si di bx str1:WORD, str2:WORD
 0034  8B 7E 04			    mov di, str1						; Point to param address
 0037  8B 76 06			    mov si, str2						; Point to param address

 003A  33 C0			    xor ax, ax							; Char number total for SI
 003C  33 DB			    xor bx, bx							; Char number total for DI

 003E				  @@cmp:
 003E  8A 04			    mov al, [si]						; Byte from SI
 0040  02 E0			    add ah, al							; Total ascii char number
 0042  8A 1D			    mov bl, [di]						; Byte from DI
 0044  02 FB			    add bh, bl							; Total ascii char number
 0046  38 D8			    cmp al, bl
 0048  75 08			    jne @@done
 004A  3C 00			    cmp al, 0
 004C  74 04			    je @@done
 004E  47			    inc di
 004F  46			    inc si
 0050  EB EC			    jmp @@cmp

 0052				  @@done:
				    .IF bh == ah						; Return 0 if both str inputs equal
 0056  B8 0000				mov ax, 0
				    .ELSEIF bh > ah						; Return 1 if str1 is greater than str2
 005F  B8 0001				mov ax, 1
				    .ELSEIF bh < ah						; Return -1 if str1 is less than str2
 0068  B8 FFFF				mov ax, -1
				    .ENDIF

				    ret
 0070				strcmp ENDP


				; ------------------------------------------------------------------
				; int strncmp(const char *str1, const char *str2, size_t n)
				; ------------------------------------------------------------------
				; Compares at most the first n bytes of str1 and str2.

 0070				strncmp PROC uses si di bx cx str1:WORD, str2:WORD, n:PTR BYTE
 0077  8B 7E 04			    mov di, str1						; Point to param address str1
 007A  8B 76 06			    mov si, str2						; Point to param address str2
 007D  8B 4E 08			    mov cx, n							; Store n in cx for loop

 0080  33 C0			    xor ax, ax							; Char number total for SI
 0082  33 DB			    xor bx, bx							; Char number total for DI

				    .REPEAT
 0084  8A 04				mov al, [si]						; Byte from S
 0086  02 E0				add ah, al
 0088  8A 1D				mov bl, [di]						; Byte from DI
 008A  02 FB				add bh, bl
					.IF al != bl						; Both bytes equal before null?
					    .BREAK
					.ELSEIF !al
					    .BREAK
					.ENDIF
 009A  47				inc di
 009B  46				inc si
 009C  49				dec cx
				    .UNTILCXZ

				    .IF bh == ah						; Return 0 if both str inputs equal
 00A3  B8 0000				mov ax, 0
				    .ELSEIF bh > ah						; Return 1 if str1 is greater than str2
 00AC  B4 01				mov ah, 1
				    .ELSEIF bh < ah						; Return -1 if str1 is less than str2
 00B4  B4 FF				mov ah, -1
				    .ENDIF

				    ret
 00BC				strncmp ENDP


				; ------------------------------------------------------------------
				; int strcoll(const char *str1, const char *str2)
				; ------------------------------------------------------------------
				; Compares the string pointed to, by str1 to the string
				; pointed to by str2.

 00BC				strcoll PROC uses si di bx str1:WORD, str2:WORD
 00C2  8B 7E 04			    mov di, str1						; Point to str1
 00C5  8B 76 06			    mov si, str2						; Point to str2

 00C8  33 C0			    xor ax, ax							; Char number total for SI
 00CA  33 DB			    xor bx, bx							; Char number total for DI

				   .REPEAT
 00CC  8A 04				mov al, [si]						; Byte from SI
 00CE  02 E0				add ah, al						; Total ascii char number
 00D0  8A 1D				mov bl, [di]						; Byte from DI
 00D2  02 FB				add bh, bl						; Total ascii char number
					.IF al != bl						; Both bytes equal before null?
					    .BREAK
					.ELSEIF !al
					    .BREAK
					.ENDIF
 00E2  47				inc di
 00E3  46				inc si
				    .UNTIL 0

				    .IF bh == ah						; Return 0 if both str inputs equal
 00EA  B8 0000			    	mov ax, 0
				    .ELSEIF bh > ah						; Return 1 if str1 is greater than str2
 00F3  B4 01			    	mov ah, 1
				    .ELSEIF bh < ah						; Return -1 if str1 is less than str2
 00FB  B4 FF			    	mov ah, -1
				    .ENDIF

				    ret
 0102				strcoll ENDP


				; ------------------------------------------------------------------
				; char *strcpy(char *dest, const char *src)
				; ------------------------------------------------------------------
				; Coppy string in src to dest

 0102				strcpy PROC uses si di ax bx dest:WORD, src:WORD
 0109  8B 7E 04			    mov di, dest						; Point to dest address
 010C  8B 76 06			    mov si, src							; Point to src address

 010F				  @@cpy:
 010F  AC			    lodsb
 0110  AA			    stosb							; Transfer contents
 0111  0A C0			    or al, al							; If source string is empty, quit out
 0113  75 FA			    jne @@cpy

				    ret
 011B				strcpy ENDP


				; ------------------------------------------------------------------
				; char *strncpy(char *dest, const char *src, size_t n)
				; ------------------------------------------------------------------
				; Coppy string in src to dest up to n chars.

 011B				strncpy PROC uses si di ax bx dest:WORD, src:WORD, n:PTR BYTE
 0122  8B 7E 04			    mov di, dest						; Point to dest address
 0125  8B 76 06			    mov si, src							; Point to src address
 0128  8B 4E 08			    mov cx, n							; Times to iterate

 012B				  @@cpy:
 012B  AC			    lodsb
 012C  AA			    stosb							; Transfer contents
 012D  0A C0			    or al, al							; If source string is empty, quit out
 012F  74 02			    jz @@done
 0131  E2 F8			    loop @@cpy

 0133				  @@done:
				    ret
 0139				strncpy ENDP


				; ------------------------------------------------------------------
				; size_t strlen(const char *str)
				; ------------------------------------------------------------------
				; Get the length of the string.

 0139				strlen PROC uses si cx string:WORD
 013E  8B 76 04			    mov si, string						; Point to string address

 0141  33 C9			    xor cx, cx							; Store n in cx for loop

 0143				  @@loop:
 0143  AC			    lodsb							; Get character from string
 0144  0A C0			    or al, al							; End of string
 0146  74 03			    jz @@done
 0148  41			    inc cx
 0149  EB F8			    jmp @@loop

 014B				  @@done:
 014B  8B C1			    mov ax, cx							; Return the length of the string

				    ret
 0151				strlen ENDP


				; ------------------------------------------------------------------
				; char *strchr(const char *str, int n)
				; ------------------------------------------------------------------
				; Searches for the first occurrence of the character c
				; (an unsigned char) in the string pointed to, by the
				; argument str.

 0151				strchr PROC uses si di cx string:WORD, n:BYTE
				    clearBuff return_buffer
 0157  57		     1	    push di
 0158  51		     1	    push cx
 0159  50		     1	    push ax
 015A  FC		     1	    cld
 015B  BF 0000 R	     1	    mov di, offset return_buffer
 015E  B9 0040		     1	    mov cx, sizeof return_buffer						; Repeat for the length of the buffer
 0161  B0 00		     1	    mov al, 0							; Clear with null (0)
 0163  F3/ AA		     1	    rep stosb
 0165  5F		     1	    pop di
 0166  59		     1	    pop cx
 0167  58		     1	    pop ax

 0168  8B 76 04			    mov si, string						; Point to param address str1
 016B  BF 0000 R		    mov di, offset return_buffer				; Point to param ret str1
 016E  8A 4E 06			    mov cl, n

 0171				  @@loop:
 0171  AC			    lodsb							; Get character from string
 0172  0A C0			    or al, al							; End of string
 0174  74 0D			    jz @@done
 0176  38 C8			    cmp al, cl
 0178  75 F7			    jne @@loop
 017A  AA			    stosb

 017B				  @@found:
 017B  AC			    lodsb							; Get character from string
 017C  0A C0			    or al, al							; End of string
 017E  74 03			    jz @@done
 0180  AA			    stosb
 0181  EB F8			    jmp @@found

 0183				  @@done:
 0183  B8 0000 R		    mov ax, offset return_buffer

				    ret
 018B				strchr ENDP


				; ------------------------------------------------------------------
				; char *strcat(char *dest, const char *src)
				; ------------------------------------------------------------------
				; The strcat function concatenates or appends src to dest.
				; All characters from src are copied including the
				; terminating null character.

 018B				strcat PROC uses si di ax dest:WORD, src:WORD
 0191  8B 7E 04			    mov di, dest					    ; Point to dest address
 0194  8B 76 06			    mov si, src						    ; Point to source address

 0197				  @@inc:						    ; Find the end of the dest string
 0197  47			    inc di
 0198  8A 05			    mov al, [di]
 019A  0A C0			    or al, al
 019C  75 F9			    jnz @@inc

 019E				  @@append:
 019E  8A 04			    mov al, [si]					    ; Transfer contents of source to dest
 01A0  88 05			    mov [di], al
 01A2  46			    inc si
 01A3  47			    inc di
 01A4  0A C0			    or al, al
 01A6  75 F6			    jne @@append

				    ret
 01AD				strcat ENDP


				; ------------------------------------------------------------------
				; char *strncat(char *dest, const char *src, size_t n)
				; ------------------------------------------------------------------
				; The strncat function concatenates or appends first n characters
				; from src to dest. All characters from src are copied including
				; the terminating null character.

 01AD				strncat PROC uses si di ax dest:WORD, src:WORD, n:PTR BYTE
 01B3  8B 7E 04			    mov di, dest					    ; Point to dest address
 01B6  8B 76 06			    mov si, src						    ; Point to source address
 01B9  8B 4E 08			    mov cx, n						    ; Point to n address

 01BC				  @@inc:						    ; Find the end of the dest
 01BC  47			    inc di
 01BD  8A 05			    mov al, [di]
 01BF  0A C0			    or al, al
 01C1  75 F9			    jnz @@inc

 01C3				  @@append:
 01C3  8A 04			    mov al, [si]					    ; Transfer contents of source to dest up to n
 01C5  88 05			    mov [di], al
 01C7  46			    inc si
 01C8  47			    inc di
 01C9  E2 F8			    loop @@append

				    ret
 01D0				strncat ENDP


				; ------------------------------------------------------------------
				; void *memset(void *str, int c, size_t n)
				; ------------------------------------------------------------------
				; Copies the character c (an unsigned char) to the first n
				; characters of the string pointed to, by the argument str.

 01D0				memset PROC uses si di ax cx string:WORD, char:BYTE, n:PTR BYTE
 01D7  8B 7E 04			    mov di, string					    ; Point to str address
 01DA  8B 4E 08			    mov cx, n						    ; Point to n address

 01DD				  @@append:
 01DD  8A 46 06			    mov al, char					    ; Move c into str n times
 01E0  88 05			    mov [di], al
 01E2  47			    inc di
 01E3  E2 F8			    loop @@append

				    ret
 01EB				memset ENDP


				; ------------------------------------------------------------------
				; void *memmove(void *dest, const void *src, size_t n)
				; ------------------------------------------------------------------
				; Copies n characters from src to dest.

 01EB				memmove PROC uses si di ax cx dest:WORD, src:WORD, n:PTR BYTE
 01F2  8B 7E 04			    mov di, dest						; Point to dest address
 01F5  8B 76 06			    mov si, src							; Point to src address
 01F8  8B 4E 08			    mov cx, n							; Point to n address

 01FB				  @@append:
 01FB  8A 04			    mov al, [si]						; Char from src to al
 01FD  88 05			    mov [di], al						; Char from al moves into dest
 01FF  47			    inc di
 0200  46			    inc si
 0201  E2 F8			    loop @@append

				    ret
 0209				memmove ENDP


				; ------------------------------------------------------------------
				; void *memcpy(void *dest, const void *src, size_t n)
				; ------------------------------------------------------------------
				; This function copies n characters from memory at src to the
				; memory area at the dest.

 0209				memcpy PROC uses si di ax cx dest:WORD, src:WORD, n:PTR BYTE
 0210  8B 7E 04			    mov di, dest					    ; Point to str1 address
 0213  8B 76 06			    mov si, src						    ; Point to str2 address
 0216  8B 4E 08			    mov cx, n						    ; Point to n address

 0219				  @@cpy:
 0219  8A 04			    mov al, [si]					    ; Transfer contents (at least one byte terminator)
 021B  88 05			    mov [di], al
 021D  0A C0			    or al, al
 021F  74 05			    je @@done
 0221  46			    inc si
 0222  47			    inc di
 0223  41			    inc cx
 0224  E2 F3			    loop @@cpy

 0226				  @@done:
				    ret
 022C				memcpy ENDP


				; ------------------------------------------------------------------
				; int memcmp(const void *str1, const void *str2, size_t n)
				; ------------------------------------------------------------------
				; Compares at most the first n bytes of str1 and str2.

 022C				memcmp PROC uses si di bx cx str1:WORD, str2:WORD, n:PTR BYTE
 0233  8B 7E 04			    mov di, str1						; Point to str1 address
 0236  8B 76 06			    mov si, str2						; Point to str2 address
 0239  8B 4E 08			    mov cx, n							; Point to n addres

 023C  33 C0			    xor ax, ax							; Char number total for SI
 023E  33 DB			    xor bx, bx							; Char number total for DI

 0240				  @@cmp:
 0240  8A 04			    mov al, [si]						; Byte from S
 0242  02 E0			    add ah, al							; Add byte value to ah
 0244  8A 1D			    mov bl, [di]						; Byte from DI
 0246  02 FB			    add bh, bl							; Add byte value to bh
 0248  38 D8			    cmp al, bl							; If both bytes not equal then exit
 024A  75 08			    jne @@done
 024C  0A C0			    or al, al							; If no bytes left then exit
 024E  74 04			    jz @@done
 0250  47			    inc di
 0251  46			    inc si
 0252  E2 EC			    loop @@cmp

 0254				  @@done:
				    .IF bh == ah						; Return 0 if both str inputs equal
 0258  B8 0000			    	mov ax, 0
				    .ELSEIF bh > ah						; Return 1 if str1 is greater than str2
 0261  B4 01			    	mov ah, 1
				    .ELSEIF bh < ah						; Return -1 if str1 is less than str2
 0269  B4 FF			    	mov ah, -1
				    .ENDIF

				    ret
 0271				memcmp ENDP


				; ------------------------------------------------------------------
				; void *memchr(const void *str, int c, size_t n)
				; ------------------------------------------------------------------
				; Searches for the first occurrence of the character c
				; (an unsigned char) in the first n bytes of the string
				; pointed to, by the argument str.

 0271				memchr PROC uses si di bx cx string:WORD, char:BYTE, n:PTR BYTE
				    clearBuff return_buffer
 0278  57		     1	    push di
 0279  51		     1	    push cx
 027A  50		     1	    push ax
 027B  FC		     1	    cld
 027C  BF 0000 R	     1	    mov di, offset return_buffer
 027F  B9 0040		     1	    mov cx, sizeof return_buffer						; Repeat for the length of the buffer
 0282  B0 00		     1	    mov al, 0							; Clear with null (0)
 0284  F3/ AA		     1	    rep stosb
 0286  5F		     1	    pop di
 0287  59		     1	    pop cx
 0288  58		     1	    pop ax

 0289  8B 76 04			    mov si, string						; Point to param address str
 028C  BF 0000 R		    mov di, offset return_buffer

 028F				  @@loop:
 028F  AC			    lodsb							; Get character from string
 0290  0A C0			    or al, al							; End of string
 0292  74 19			    jz @@done
 0294  3A 46 06			    cmp al, char
 0297  75 F6			    jne @@loop

 0299  88 05			    mov [di], al						; Add n to buffer and increase
 029B  47			    inc di

 029C  8B 4E 08			    mov cx, n						; Times to iterate
 029F  0B C9			    or cx, cx
 02A1  74 0A			    jz @@done

 02A3				  @@iterate:
 02A3  AC			    lodsb							; Get character from string
 02A4  0A C0			    or al, al							; End of string
 02A6  74 05			    jz @@done
 02A8  88 05			    mov [di], al
 02AA  47			    inc di
 02AB  E2 F6			    loop @@iterate

 02AD				  @@done:
 02AD  B8 0000 R		    mov ax, offset return_buffer

				    ret
 02B6				memchr ENDP


				; ------------------------------------------------------------------
				; size_t strcspn(const char *str1, const char *str2);
				; ------------------------------------------------------------------
				; This function calculates the length of the initial
				; segment of str1, which consists entirely of characters
				; not in str2.

 02B6				strcspn PROC uses si di bx cx str1:WORD, str2:WORD
 02BD  8B 76 04			    mov si, str1					    ; Point to str1 address
 02C0  8B 7E 06			    mov di, str2					    ; Point to str2 address

 02C3  33 C9			    xor cx, cx

 02C5				  @@cmp:
 02C5  8A 04			    mov al, [si]					    ; Byte from SI
 02C7  57			    push di						    ; Save DI

 02C8				  @@char:
 02C8  8A 1D			    mov bl, [di]					    ; Byte from DI
 02CA  38 D8			    cmp al, bl						    ; If both bytes equal then exit
 02CC  74 0E			    je @@exit
 02CE  47			    inc di						    ; Increase DI untill zero
 02CF  0A DB			    or bl, bl
 02D1  75 F5			    jnz @@char
 02D3  5F			    pop di						    ; Restore DI
 02D4  0A C0			    or al, al						    ; If no bytes left then exit
 02D6  74 05			    jz @@done
 02D8  46			    inc si
 02D9  41			    inc cx
 02DA  EB E9			    jmp @@cmp

 02DC				  @@exit:
 02DC  5F			     pop di						    ; Restore DI

 02DD				  @@done:
 02DD  8B C1			    mov ax, cx
				    ret
 02E5				strcspn ENDP


				; ------------------------------------------------------------------
				; char *strpbrk(const char *str1, const char *str2);
				; ------------------------------------------------------------------
				; This function finds the first character in the string str1
				; that matches any character specified in str2. This does
				; not include the terminating null-characters.

 02E5				strpbrk PROC uses si di bx str1:WORD, str2:WORD
				    clearBuff return_buffer
 02EB  57		     1	    push di
 02EC  51		     1	    push cx
 02ED  50		     1	    push ax
 02EE  FC		     1	    cld
 02EF  BF 0000 R	     1	    mov di, offset return_buffer
 02F2  B9 0040		     1	    mov cx, sizeof return_buffer						; Repeat for the length of the buffer
 02F5  B0 00		     1	    mov al, 0							; Clear with null (0)
 02F7  F3/ AA		     1	    rep stosb
 02F9  5F		     1	    pop di
 02FA  59		     1	    pop cx
 02FB  58		     1	    pop ax

 02FC  8B 76 04			    mov si, str1						; Point to str1 address
 02FF  8B 7E 06			    mov di, str2						; Point to str2 address

 0302				  @@cmp:
 0302  8A 04			    mov al, [si]						; Byte from SI
 0304  57			    push di							; Save DI

 0305				  @@char:
 0305  8A 1D			    mov bl, [di]						; Byte from DI
 0307  38 D8			    cmp al, bl							; If both bytes equal then exit
 0309  74 0D			    je @@equal
 030B  47			    inc di							; Increase DI untill zero
 030C  0A DB			    or bl, bl
 030E  75 F5			    jnz @@char
 0310  5F			    pop di							; Restore DI

 0311  0A C0			    or al, al							; If no bytes left then exit
 0313  74 18			    jz @@error
 0315  46			    inc si
 0316  EB EA			    jmp @@cmp

 0318				  @@equal:
 0318  5F			    pop di
 0319  BF 0000 R		    mov di, offset return_buffer				; Found equal char

 031C				  @@fill:
 031C  8A 04			    mov al, [si]
 031E  88 05			    mov [di], al
 0320  0A C0			    or al, al							; If no bytes left then exit
 0322  74 04			    jz @@buff
 0324  46			    inc si
 0325  47			    inc di
 0326  EB F4			    jmp @@fill

 0328				  @@buff:
 0328  B8 0000 R		    mov ax, offset return_buffer
 032B  EB 03			    jmp @@done

 032D				  @@error:
 032D  B8 0000			    mov ax, 0							 ; Return null on char not found

 0330				  @@done:
				    ret
 0335				strpbrk ENDP


				; ------------------------------------------------------------------
				; char *strrchr(const char *str, int n);
				; ------------------------------------------------------------------
				; This function searches for the last occurrence of the
				; character c (an unsigned char) in the string pointed
				; to, by the argument str.

 0335				strrchr PROC uses si di bx cx str1:WORD, n:BYTE
				    clearBuff return_buffer
 033C  57		     1	    push di
 033D  51		     1	    push cx
 033E  50		     1	    push ax
 033F  FC		     1	    cld
 0340  BF 0000 R	     1	    mov di, offset return_buffer
 0343  B9 0040		     1	    mov cx, sizeof return_buffer						; Repeat for the length of the buffer
 0346  B0 00		     1	    mov al, 0							; Clear with null (0)
 0348  F3/ AA		     1	    rep stosb
 034A  5F		     1	    pop di
 034B  59		     1	    pop cx
 034C  58		     1	    pop ax

 034D  8B 76 04			    mov si, str1						; Point to str1 address
 0350  56			    push si							; Save SI

 0351  33 C9			    xor cx, cx							; Clear counter
 0353  33 DB			    xor bx, bx							; Clear counter storage

 0355				  @@cmp:
 0355  8A 04			    mov al, [si]						; Byte from SI
 0357  3A 46 06			    cmp al, n
 035A  74 02			    je @@found							; If equal store counter in BX
 035C  75 02			    jne @@cont							; Else continue

 035E				  @@found:
 035E  8B D9			    mov bx, cx

 0360				  @@cont:
 0360  0A C0			    or al, al
 0362  74 04			    jz @@fill							; If no more bytes left we need to now fill the buffer
 0364  46			    inc si							; Increment string
 0365  41			    inc cx							; Increment counter
 0366  EB ED			    jmp @@cmp

 0368				  @@fill:
 0368  5E			    pop si							; Restore the string
 0369  0B DB			    or bx, bx							; If stored counter is null return null
 036B  74 0F			    jz @@error
 036D  03 F3			    add si, bx							; Add offfset of counter and string
 036F  BF 0000 R		    mov di, offset return_buffer				; Point DI to the offset of return_buffer

 0372				  @@iterate:
 0372  AC			    lodsb							; Get character from string
 0373  0A C0			    or al, al							; End of string
 0375  74 09			    jz @@finished
 0377  88 05			    mov [di], al						; Store char into DI
 0379  47			    inc di							; Increase DI
 037A  EB F6			    jmp @@iterate

 037C				  @@error:
 037C  33 C0			    xor ax, ax
 037E  EB 03			    jmp @@done

 0380				  @@finished:
 0380  B8 0000 R		    mov ax, offset return_buffer

 0383				  @@done:
				    ret
 0389				strrchr ENDP


				; ------------------------------------------------------------------
				; size_t strspn(const char *str1, const char *str2);
				; ------------------------------------------------------------------
				; This function calculates the length of the initial
				; segment of str1 which consists entirely of chars
				; in str2.

 0389				strspn PROC uses di si cx str1:PTR WORD, str2:WORD
 038F  8B 76 04			    mov si, str1						; Point to str1 address
 0392  8B 7E 06			    mov di, str2						; Point to str2 address

 0395  33 C9			    xor cx, cx							; Clear counter

 0397				  @@cmp:
 0397  8A 04			    mov al, [si]						; Byte from S
 0399  8A 1D			    mov bl, [di]						; Byte from DI
 039B  38 D8			    cmp al, bl							; If both bytes not equal then exit
 039D  75 09			    jne @@done
 039F  0A C0			    or al, al							; If no bytes left then exit
 03A1  74 05			    jz @@done
 03A3  47			    inc di
 03A4  46			    inc si
 03A5  41			    inc cx
 03A6  EB EF			    jmp @@cmp

 03A8				  @@done:
 03A8  8B C1			    mov ax, cx							; Return counter number
				    ret
 03AF				strspn ENDP


				; ------------------------------------------------------------------
				; char *strstr(const char *haystack, const char *needle)
				; ------------------------------------------------------------------
				; This function finds the first occurrence of the substring
				; needle in the string haystack. The terminating '\0'
				; characters are not compared.

 03AF				strstr PROC uses si di bx cx haystack:WORD, needle:WORD
				    clearBuff return_buffer
 03B6  57		     1	    push di
 03B7  51		     1	    push cx
 03B8  50		     1	    push ax
 03B9  FC		     1	    cld
 03BA  BF 0000 R	     1	    mov di, offset return_buffer
 03BD  B9 0040		     1	    mov cx, sizeof return_buffer						; Repeat for the length of the buffer
 03C0  B0 00		     1	    mov al, 0							; Clear with null (0)
 03C2  F3/ AA		     1	    rep stosb
 03C4  5F		     1	    pop di
 03C5  59		     1	    pop cx
 03C6  58		     1	    pop ax

 03C7  8B 76 04			    mov si, haystack						; Point to haystack address
 03CA  8B 7E 06			    mov di, needle						; Point to needle address

 03CD  33 C9			    xor cx, cx							; Store n in cx for loop

 03CF				  @@cmp:
 03CF  8A 04			    mov al, [si]						; Byte from SI
 03D1  8A 1D			    mov bl, [di]						; Byte from DI
 03D3  38 D8			    cmp al, bl							; If not equal continue to iterate
 03D5  75 12			    jne @@cont
 03D7  60			    pusha

 03D8				  @@cmpstr:
 03D8  8A 04			    mov al, [si]						; Byte from SI
 03DA  8A 1D			    mov bl, [di]						; Byte from DI
 03DC  0A DB			    or bl, bl							; If end of needle return true
 03DE  74 11			    je @@equal
 03E0  38 D8			    cmp al, bl							; Test if equal
 03E2  75 04			    jne @@notequal						; If not equal continue @@cmp loop
 03E4  47			    inc di
 03E5  46			    inc si
 03E6  EB F0			    jmp @@cmpstr

 03E8				  @@notequal:
 03E8  61			    popa

 03E9				  @@cont:
 03E9  0A C0			    or al, al							; If no bytes left then exit
 03EB  74 17			    jz @@done
 03ED  46			    inc si
 03EE  41			    inc cx
 03EF  EB DE			    jmp @@cmp

 03F1				 @@equal:
 03F1  61			    popa
 03F2  BF 0000 R		    mov di, offset return_buffer				; Point DI to the offset of return_buffer
 03F5  8B 76 04			    mov si, haystack						; Point to haystack address
 03F8  03 F1			    add si, cx

 03FA				 @@iterate:
 03FA  AC			   lodsb							; Get character from string
 03FB  0A C0			   or al, al							; End of string
 03FD  74 05			   jz @@done
 03FF  88 05			   mov [di], al							; Store char into DI
 0401  47			   inc di							; Increase DI
 0402  EB F6			   jmp @@iterate

 0404				  @@done:
 0404  B8 0000 R		    mov ax, offset return_buffer				; Return the buffer
				    ret
 040D				strstr	ENDP

				; ------------------------------------------------------------------
				; char *strtok(char *str, const char *delim)
				; ------------------------------------------------------------------
 040D				strtok PROC uses si di bx string:WORD, delim:WORD
 0413  8B 76 04			    mov si, string						; Point to haystack address
 0416  8B 7E 04			    mov di, string						; This function makes me wanta kill myself

				    clearBuff return_buffer
 0419  57		     1	    push di
 041A  51		     1	    push cx
 041B  50		     1	    push ax
 041C  FC		     1	    cld
 041D  BF 0000 R	     1	    mov di, offset return_buffer
 0420  B9 0040		     1	    mov cx, sizeof return_buffer						; Repeat for the length of the buffer
 0423  B0 00		     1	    mov al, 0							; Clear with null (0)
 0425  F3/ AA		     1	    rep stosb
 0427  5F		     1	    pop di
 0428  59		     1	    pop cx
 0429  58		     1	    pop ax

 042A  8A 1D			    mov bl, [di]						; Byte from DI
 042C  0A DB			    or bl, bl
 042E  74 02			    jz @@s
 0430  EB 5B			    jmp @@f

 0432				  @@s:
 0432  BE 0040 R		    mov si, offset strtok_buffer
 0435  BF 0000 R		    mov di, offset return_buffer
 0438  8A 04			    mov al, [si]
 043A  0A C0			    or al, al
 043C  75 05			    jnz @@s_fill_return
 043E  B8 0000			    mov ax, 0
 0441  EB 75			    jmp @@done

 0443				  @@s_fill_return:
 0443  AC			    lodsb							; Get byte from SI into AL
 0444  3A 46 06			    cmp al, [bp + 6]
 0447  74 05			    je @@s_found_delim
 0449  AA			    stosb							; Store AL into DI
 044A  0A C0			    or al, al							; End of string?
 044C  75 F5			    jnz @@s_fill_return

 044E				  @@s_found_delim:
 044E  BF 0080 R		    mov di, offset token_buffer

 0451				  @@s_fill_token:
 0451  AC			    lodsb							; Get byte from SI into AL
 0452  AA			    stosb							; Store AL into DI
 0453  0A C0			    or al, al							; End of string?
 0455  75 FA			    jnz @@s_fill_token

				    clearBuff strtok_buffer
 0457  57		     1	    push di
 0458  51		     1	    push cx
 0459  50		     1	    push ax
 045A  FC		     1	    cld
 045B  BF 0040 R	     1	    mov di, offset strtok_buffer
 045E  B9 0040		     1	    mov cx, sizeof strtok_buffer						; Repeat for the length of the buffer
 0461  B0 00		     1	    mov al, 0							; Clear with null (0)
 0463  F3/ AA		     1	    rep stosb
 0465  5F		     1	    pop di
 0466  59		     1	    pop cx
 0467  58		     1	    pop ax

 0468  BF 0040 R		    mov di, offset strtok_buffer
 046B  BE 0080 R		    mov si, offset token_buffer

 046E				  @@s_fill_strtok:
 046E  AC			    lodsb							; Get byte from SI into AL
 046F  AA			    stosb							; Store AL into DI
 0470  0A C0			    or al, al							; End of string?
 0472  75 FA			    jnz @@s_fill_strtok

				    clearBuff token_buffer
 0474  57		     1	    push di
 0475  51		     1	    push cx
 0476  50		     1	    push ax
 0477  FC		     1	    cld
 0478  BF 0080 R	     1	    mov di, offset token_buffer
 047B  B9 0040		     1	    mov cx, sizeof token_buffer						; Repeat for the length of the buffer
 047E  B0 00		     1	    mov al, 0							; Clear with null (0)
 0480  F3/ AA		     1	    rep stosb
 0482  5F		     1	    pop di
 0483  59		     1	    pop cx
 0484  58		     1	    pop ax

 0485  B8 0000 R		    mov ax, offset return_buffer
				    ret

 048D				  @@f:
				    clearBuff strtok_buffer
 048D  57		     1	    push di
 048E  51		     1	    push cx
 048F  50		     1	    push ax
 0490  FC		     1	    cld
 0491  BF 0040 R	     1	    mov di, offset strtok_buffer
 0494  B9 0040		     1	    mov cx, sizeof strtok_buffer						; Repeat for the length of the buffer
 0497  B0 00		     1	    mov al, 0							; Clear with null (0)
 0499  F3/ AA		     1	    rep stosb
 049B  5F		     1	    pop di
 049C  59		     1	    pop cx
 049D  58		     1	    pop ax
 049E  BF 0000 R		    mov di, offset return_buffer	; Point to buffer address

 04A1				  @@f_fill_return:
 04A1  AC			    lodsb							; Get byte from SI into AL
 04A2  3A 46 04			    cmp al, [bp+4]
 04A5  74 05			    je @@f_found_delim
 04A7  AA			    stosb							; Store AL into DI
 04A8  0A C0			    or al, al						; End of string?
 04AA  75 F5			    jnz @@f_fill_return

 04AC				  @@f_found_delim:
 04AC  BF 0040 R		    mov di, offset strtok_buffer

 04AF				  @@f_fill_strtok:
 04AF  AC			    lodsb							; Get byte from SI into AL
 04B0  AA			    stosb							; Store AL into DI
 04B1  0A C0			    or al, al						; End of string?
 04B3  75 FA			    jnz @@f_fill_strtok
 04B5  B8 0000 R		    mov ax, offset return_buffer

 04B8				  @@done:
				    ret
 04BD				strtok ENDP

				; ------------------------------------------------------------------
				; size_t strxfrm(char *dest, const char *src, size_t n)
				; ------------------------------------------------------------------
				; This function transforms the first n chars of src
				; into the locale and puts them into the dest.

 04BD				strxfrm PROC uses di si cx dest:WORD, src:WORD, n:PTR BYTE
 04C3  8B 7E 04			    mov di, dest							; Point to str1 address
 04C6  8B 76 06			    mov si, src							; Point to str2 address

 04C9  33 C9			    xor cx, cx

 04CB				  @@loop:								; Get length of SI
 04CB  AC			    lodsb								; Get character from string
 04CC  0A C0			    or al, al								; End of string
 04CE  74 03			    jz @@cont
 04D0  41			    inc cx
 04D1  EB F8			    jmp @@loop

 04D3				  @@cont:
 04D3  51			    push cx								; Save length of SI
 04D4  8B 4E 08			    mov cx, n							; Point to n addres
 04D7  8B 76 06			    mov si, src							; Point to str2 address

 04DA				  @@append:
 04DA  8A 04			    mov al, [si]							; Transfer contents of source to dest up to n
 04DC  88 05			    mov [di], al
 04DE  46			    inc si
 04DF  47			    inc di
 04E0  E2 F8			    loop @@append

 04E2				  @@done:
 04E2  59			    pop cx
 04E3  8B C1			    mov ax, cx
				    ret
 04EA				strxfrm ENDP
				END
Microsoft (R) Macro Assembler Version 6.15.8803		    08/27/17 03:17:34
src\string.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

clearBuff  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

tm . . . . . . . . . . . . . . .	 0012
  tm_sec . . . . . . . . . . . .	 0000	     Word
  tm_min . . . . . . . . . . . .	 0002	     Word
  tm_hour  . . . . . . . . . . .	 0004	     Word
  tm_mday  . . . . . . . . . . .	 0006	     Word
  tm_mon . . . . . . . . . . . .	 0008	     Word
  tm_year  . . . . . . . . . . .	 000A	     Word
  tm_wday  . . . . . . . . . . .	 000C	     Word
  tm_yday  . . . . . . . . . . .	 000E	     Word
  tm_isdst . . . . . . . . . . .	 0010	     Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_TEXT  . . . . . . . . . . . . .	16 Bit	 04EA	  Word	  Public  'CODE'	
_DATA  . . . . . . . . . . . . .	16 Bit	 0A8B	  Word	  Public  'DATA'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

_assert  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
bcd  . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
clrscr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cprintf  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cputsxy  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cputs  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cscanf . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cursoroff  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cursoron . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
delay  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
drawline . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
getchar  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
getche . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
getch  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
gets . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
gotoxy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
highvideo  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
insline  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isalnum  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isalpha  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
iscntrl  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isdigit  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isgraph  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
islower  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isprint  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ispunct  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isspace  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isupper  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isxdigit . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
kbhit  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
localtime  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
lowvideo . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
memchr . . . . . . . . . . . . .	P Near	 0271	  _TEXT	Length= 0045 Public C
  string . . . . . . . . . . . .	Word	 bp + 0004
  char . . . . . . . . . . . . .	Byte	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
  @@loop . . . . . . . . . . . .	L Near	 028F	  _TEXT	
  @@iterate  . . . . . . . . . .	L Near	 02A3	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 02AD	  _TEXT	
memcmp . . . . . . . . . . . . .	P Near	 022C	  _TEXT	Length= 0045 Public C
  str1 . . . . . . . . . . . . .	Word	 bp + 0004
  str2 . . . . . . . . . . . . .	Word	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
  @@cmp  . . . . . . . . . . . .	L Near	 0240	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 0254	  _TEXT	
memcpy . . . . . . . . . . . . .	P Near	 0209	  _TEXT	Length= 0023 Public C
  dest . . . . . . . . . . . . .	Word	 bp + 0004
  src  . . . . . . . . . . . . .	Word	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
  @@cpy  . . . . . . . . . . . .	L Near	 0219	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 0226	  _TEXT	
memmove  . . . . . . . . . . . .	P Near	 01EB	  _TEXT	Length= 001E Public C
  dest . . . . . . . . . . . . .	Word	 bp + 0004
  src  . . . . . . . . . . . . .	Word	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
  @@append . . . . . . . . . . .	L Near	 01FB	  _TEXT	
memset . . . . . . . . . . . . .	P Near	 01D0	  _TEXT	Length= 001B Public C
  string . . . . . . . . . . . .	Word	 bp + 0004
  char . . . . . . . . . . . . .	Byte	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
  @@append . . . . . . . . . . .	L Near	 01DD	  _TEXT	
newline  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
plotImage  . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 002E Public C
printf . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
putchar  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
putch  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
puts . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
raise  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
scanf  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
setcursortype  . . . . . . . . .	P Near	 0000	  Length= 0000 External C
signal . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strcat . . . . . . . . . . . . .	P Near	 018B	  _TEXT	Length= 0022 Public C
  dest . . . . . . . . . . . . .	Word	 bp + 0004
  src  . . . . . . . . . . . . .	Word	 bp + 0006
  @@inc  . . . . . . . . . . . .	L Near	 0197	  _TEXT	
  @@append . . . . . . . . . . .	L Near	 019E	  _TEXT	
strchr . . . . . . . . . . . . .	P Near	 0151	  _TEXT	Length= 003A Public C
  string . . . . . . . . . . . .	Word	 bp + 0004
  n  . . . . . . . . . . . . . .	Byte	 bp + 0006
  @@loop . . . . . . . . . . . .	L Near	 0171	  _TEXT	
  @@found  . . . . . . . . . . .	L Near	 017B	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 0183	  _TEXT	
strcmp . . . . . . . . . . . . .	P Near	 002E	  _TEXT	Length= 0042 Public C
  str1 . . . . . . . . . . . . .	Word	 bp + 0004
  str2 . . . . . . . . . . . . .	Word	 bp + 0006
  @@cmp  . . . . . . . . . . . .	L Near	 003E	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 0052	  _TEXT	
strcoll  . . . . . . . . . . . .	P Near	 00BC	  _TEXT	Length= 0046 Public C
  str1 . . . . . . . . . . . . .	Word	 bp + 0004
  str2 . . . . . . . . . . . . .	Word	 bp + 0006
strcpy . . . . . . . . . . . . .	P Near	 0102	  _TEXT	Length= 0019 Public C
  dest . . . . . . . . . . . . .	Word	 bp + 0004
  src  . . . . . . . . . . . . .	Word	 bp + 0006
  @@cpy  . . . . . . . . . . . .	L Near	 010F	  _TEXT	
strcspn  . . . . . . . . . . . .	P Near	 02B6	  _TEXT	Length= 002F Public C
  str1 . . . . . . . . . . . . .	Word	 bp + 0004
  str2 . . . . . . . . . . . . .	Word	 bp + 0006
  @@cmp  . . . . . . . . . . . .	L Near	 02C5	  _TEXT	
  @@char . . . . . . . . . . . .	L Near	 02C8	  _TEXT	
  @@exit . . . . . . . . . . . .	L Near	 02DC	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 02DD	  _TEXT	
strlen . . . . . . . . . . . . .	P Near	 0139	  _TEXT	Length= 0018 Public C
  string . . . . . . . . . . . .	Word	 bp + 0004
  @@loop . . . . . . . . . . . .	L Near	 0143	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 014B	  _TEXT	
strncat  . . . . . . . . . . . .	P Near	 01AD	  _TEXT	Length= 0023 Public C
  dest . . . . . . . . . . . . .	Word	 bp + 0004
  src  . . . . . . . . . . . . .	Word	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
  @@inc  . . . . . . . . . . . .	L Near	 01BC	  _TEXT	
  @@append . . . . . . . . . . .	L Near	 01C3	  _TEXT	
strncmp  . . . . . . . . . . . .	P Near	 0070	  _TEXT	Length= 004C Public C
  str1 . . . . . . . . . . . . .	Word	 bp + 0004
  str2 . . . . . . . . . . . . .	Word	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
strncpy  . . . . . . . . . . . .	P Near	 011B	  _TEXT	Length= 001E Public C
  dest . . . . . . . . . . . . .	Word	 bp + 0004
  src  . . . . . . . . . . . . .	Word	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
  @@cpy  . . . . . . . . . . . .	L Near	 012B	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 0133	  _TEXT	
strpbrk  . . . . . . . . . . . .	P Near	 02E5	  _TEXT	Length= 0050 Public C
  str1 . . . . . . . . . . . . .	Word	 bp + 0004
  str2 . . . . . . . . . . . . .	Word	 bp + 0006
  @@cmp  . . . . . . . . . . . .	L Near	 0302	  _TEXT	
  @@char . . . . . . . . . . . .	L Near	 0305	  _TEXT	
  @@equal  . . . . . . . . . . .	L Near	 0318	  _TEXT	
  @@fill . . . . . . . . . . . .	L Near	 031C	  _TEXT	
  @@buff . . . . . . . . . . . .	L Near	 0328	  _TEXT	
  @@error  . . . . . . . . . . .	L Near	 032D	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 0330	  _TEXT	
strrchr  . . . . . . . . . . . .	P Near	 0335	  _TEXT	Length= 0054 Public C
  str1 . . . . . . . . . . . . .	Word	 bp + 0004
  n  . . . . . . . . . . . . . .	Byte	 bp + 0006
  @@cmp  . . . . . . . . . . . .	L Near	 0355	  _TEXT	
  @@found  . . . . . . . . . . .	L Near	 035E	  _TEXT	
  @@cont . . . . . . . . . . . .	L Near	 0360	  _TEXT	
  @@fill . . . . . . . . . . . .	L Near	 0368	  _TEXT	
  @@iterate  . . . . . . . . . .	L Near	 0372	  _TEXT	
  @@error  . . . . . . . . . . .	L Near	 037C	  _TEXT	
  @@finished . . . . . . . . . .	L Near	 0380	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 0383	  _TEXT	
strspn . . . . . . . . . . . . .	P Near	 0389	  _TEXT	Length= 0026 Public C
  str1 . . . . . . . . . . . . .	Word	 bp + 0004
  str2 . . . . . . . . . . . . .	Word	 bp + 0006
  @@cmp  . . . . . . . . . . . .	L Near	 0397	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 03A8	  _TEXT	
strstr . . . . . . . . . . . . .	P Near	 03AF	  _TEXT	Length= 005E Public C
  haystack . . . . . . . . . . .	Word	 bp + 0004
  needle . . . . . . . . . . . .	Word	 bp + 0006
  @@cmp  . . . . . . . . . . . .	L Near	 03CF	  _TEXT	
  @@cmpstr . . . . . . . . . . .	L Near	 03D8	  _TEXT	
  @@notequal . . . . . . . . . .	L Near	 03E8	  _TEXT	
  @@cont . . . . . . . . . . . .	L Near	 03E9	  _TEXT	
  @@equal  . . . . . . . . . . .	L Near	 03F1	  _TEXT	
  @@iterate  . . . . . . . . . .	L Near	 03FA	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 0404	  _TEXT	
strtok . . . . . . . . . . . . .	P Near	 040D	  _TEXT	Length= 00B0 Public C
  string . . . . . . . . . . . .	Word	 bp + 0004
  delim  . . . . . . . . . . . .	Word	 bp + 0006
  @@s  . . . . . . . . . . . . .	L Near	 0432	  _TEXT	
  @@s_fill_return  . . . . . . .	L Near	 0443	  _TEXT	
  @@s_found_delim  . . . . . . .	L Near	 044E	  _TEXT	
  @@s_fill_token . . . . . . . .	L Near	 0451	  _TEXT	
  @@s_fill_strtok  . . . . . . .	L Near	 046E	  _TEXT	
  @@f  . . . . . . . . . . . . .	L Near	 048D	  _TEXT	
  @@f_fill_return  . . . . . . .	L Near	 04A1	  _TEXT	
  @@f_found_delim  . . . . . . .	L Near	 04AC	  _TEXT	
  @@f_fill_strtok  . . . . . . .	L Near	 04AF	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 04B8	  _TEXT	
strxfrm  . . . . . . . . . . . .	P Near	 04BD	  _TEXT	Length= 002D Public C
  dest . . . . . . . . . . . . .	Word	 bp + 0004
  src  . . . . . . . . . . . . .	Word	 bp + 0006
  n  . . . . . . . . . . . . . .	Word	 bp + 0008
  @@loop . . . . . . . . . . . .	L Near	 04CB	  _TEXT	
  @@cont . . . . . . . . . . . .	L Near	 04D3	  _TEXT	
  @@append . . . . . . . . . . .	L Near	 04DA	  _TEXT	
  @@done . . . . . . . . . . . .	L Near	 04E2	  _TEXT	
textbackground . . . . . . . . .	P Near	 0000	  Length= 0000 External C
textcolor  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
tolower  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
toupper  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
ungetch  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
wherex . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
wherey . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0001h	 
@Model . . . . . . . . . . . . .	Number	 0001h	 
@code  . . . . . . . . . . . . .	Text   	 DGROUP
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
BUFSIZ . . . . . . . . . . . . .	Number	 1000h	 
FILENAME_MAX . . . . . . . . . .	Number	 000Bh	 
NSIG . . . . . . . . . . . . . .	Number	 0017h	 
SIGABRT  . . . . . . . . . . . .	Number	 0016h	 
SIGBREAK . . . . . . . . . . . .	Number	 0015h	 
SIGFPE . . . . . . . . . . . . .	Number	 0008h	 
SIGILL . . . . . . . . . . . . .	Number	 0004h	 
SIGINT . . . . . . . . . . . . .	Number	 0002h	 
SIGSEGV  . . . . . . . . . . . .	Number	 000Bh	 
SIGTERM  . . . . . . . . . . . .	Number	 000Fh	 
_ASSERT_ . . . . . . . . . . . .	Text   	 1
_CONIO_  . . . . . . . . . . . .	Text   	 1
_CTYPE_  . . . . . . . . . . . .	Text   	 1
_SIGNAL_ . . . . . . . . . . . .	Text   	 1
_STDBOOL_  . . . . . . . . . . .	Text   	 1
_STDIO_  . . . . . . . . . . . .	Text   	 1
_STRING_ . . . . . . . . . . . .	Text   	 1
_TIME_ . . . . . . . . . . . . .	Text   	 1
derpImage  . . . . . . . . . . .	Byte	 0314	  _DATA	
derpSize . . . . . . . . . . . .	Number	 00FFh	 
false  . . . . . . . . . . . . .	Number	 0000h	 
memesImage . . . . . . . . . . .	Byte	 0512	  _DATA	
memesSize  . . . . . . . . . . .	Number	 02BCh	 
penImage . . . . . . . . . . . .	Byte	 00C0	  _DATA	
penSize  . . . . . . . . . . . .	Number	 012Ah	 
return_buffer  . . . . . . . . .	Byte	 0000	  _DATA	
strtok_buffer  . . . . . . . . .	Byte	 0040	  _DATA	
token_buffer . . . . . . . . . .	Byte	 0080	  _DATA	
true . . . . . . . . . . . . . .	Number	 0001h	 

	   0 Warnings
	   0 Errors
