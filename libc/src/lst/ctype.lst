Microsoft (R) Macro Assembler Version 6.15.8803		    08/27/17 03:46:03
src\ctype.asm						     Page 1 - 1


				; ------------------------------------------------------------------
				.model tiny, c							; Small memoy model
				.386								; 80386 CPU
				include libc.inc						; Include library headers
			      C include stdio.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include string.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include ctype.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include conio.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include assert.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include stdbool.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include signal.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C include time.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
 0000				.data								; Data segment
 0000				.code								; Start of code segment
				; ------------------------------------------------------------------


				; ------------------------------------------------------------------
				; int isalnum(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character
				; is alphanumeric or not.

 0000				isalnum PROC var:PTR BYTE
 0003  8B 46 04			    mov ax, var

				    .IF ax >= 48 && ax <= 57 					; If input is a digit return 4
 0010  B8 0004			   	mov ax, 4
				    .ELSEIF ax >= 65 && ax <= 90				; If input is uppercase char return 1
 001F  B8 0001				mov ax, 1
				    .ELSEIF ax >= 97 && ax <= 122				; If input is lowercase char return 2
 002E  B8 0002				mov ax, 2
				    .ELSE
 0033  B8 0000				mov ax, 0						; Return 0 on non alphanumeric
				    .ENDIF

				    ret
 0038				isalnum ENDP


				; ------------------------------------------------------------------
				; int isalpha(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character is alphabetic.

 0038				isalpha PROC var:PTR BYTE
 003B  8B 46 04			    mov ax, var

				    .IF ax >= 65 && ax <= 90					; If input is uppercase char return 1
 0048  B8 0001			    	mov ax, 1
				    .ELSEIF ax >= 97 && ax <= 122				; If input is lowercase char return 2
 0057  B8 0002			    	mov ax, 2
				    .ELSE
 005C  B8 0000			    	mov ax, 0						; Return 0 on non alphanumeric
				    .ENDIF

				    ret
 0061				isalpha ENDP


				; ------------------------------------------------------------------
				; int iscntrl(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character is control character.

 0061				iscntrl PROC var:PTR BYTE
 0064  8B 46 04			    mov ax, var

				    .IF ax >= 0 && ax <= 31					; If input is control character return 32
 0071  B8 0020				mov ax, 32
				    .ELSEIF ax == 127						; If input is control character return 32
 007B  B8 0020				mov ax, 32
				    .ELSEIF ax == 256						; If input is control character return 32
 0085  B8 0020				mov ax, 32
				    .ELSE
 008A  B8 0000				mov ax, 0						; Return 0 on non control character
				    .ENDIF

				    ret
 008F				iscntrl ENDP


				; ------------------------------------------------------------------
				; int isdigit(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character is decimal digit.

 008F				isdigit PROC var:PTR BYTE
 0092  8B 46 04			    mov ax, var

				    .IF ax >= 48 && ax <= 57					; If input is a digits 1
 009F  B8 0001				mov ax, 1
				    .ELSE
 00A4  B8 0000				mov ax, 0						; Return 0 on non control character
				    .ENDIF

				    ret
 00A9				isdigit ENDP


				; ------------------------------------------------------------------
				; int isgraph(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character has a graphical represatation

 00A9				isgraph PROC var:PTR BYTE
 00AC  8B 46 04			    mov ax, var

				    .IF ax >= 33 && ax <= 47
 00B9  B8 0010				mov ax, 16
				    .ELSEIF ax >= 48 && ax <= 57
 00C8  B8 0004			    	mov ax, 4
				    .ELSEIF ax >= 58 && ax <= 64
 00D7  B8 0010				mov ax, 16
				    .ELSEIF ax >= 65 && ax <= 90
 00E6  B8 0001				mov ax, 1
				    .ELSEIF ax >= 91 && ax <= 96
 00F5  B8 0010				mov ax, 16
				    .ELSEIF ax >= 97 && ax <= 122
 0104  B8 0002				mov ax, 2
				    .ELSEIF ax >= 123 && ax <= 126
 0113  B8 0010				mov ax, 16
				    .ELSE
 0118  B8 0000				mov ax, 0
				    .ENDIF

				    ret
 011D				isgraph ENDP


				; ------------------------------------------------------------------
				; int islower(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character is
				; a lowercase letter.

 011D				islower PROC var:PTR BYTE
 0120  8B 46 04			    mov ax, var

				    .IF ax >= 97 && ax <= 122					; If input is lowercase char return 2
 012D  B8 0002				mov ax, 2
				    .ELSE
 0132  B8 0000				mov ax, 0						; Return 0 on non lowercase
				    .ENDIF

				    ret
 0137				islower ENDP


				; ------------------------------------------------------------------
				; int isprint(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character
				; is a printable char

 0137				isprint PROC var:PTR BYTE
 013A  8B 46 04			    mov ax, var

				    .IF ax == 32						; If input is a special char return 32
 0142  B8 0040				mov ax, 64
				    .ELSEIF ax >= 33 && ax <= 47				; If input is a special char return 16
 0151  B8 0010				mov ax, 16
				    .ELSEIF ax >= 48 && ax <= 57 				; If input is a digit return 4
 0160  B8 0004				mov ax, 4
				    .ELSEIF ax >= 58 && ax <= 64				; If input is a special char return 16
 016F  B8 0010				mov ax, 16
				    .ELSEIF ax >= 65 && ax <= 90				; If input is lowercase char return 1
 017E  B8 0001				mov ax, 1
				    .ELSEIF ax >= 91 && ax <= 96				; If input is a special char return 16
 018D  B8 0010				mov ax, 16
				    .ELSEIF ax >= 97 && ax <= 122				; If input is uppercase char return 2
 019C  B8 0002				mov ax, 2
				    .ELSEIF ax >= 123 && ax <= 126				; If input is a special char return 16
 01AB  B8 0010				mov ax, 16
				    .ELSE
 01B0  B8 0000				mov ax, 0						; Return 0 on non printable char
				    .ENDIF

				    ret
 01B5				isprint ENDP


				; ------------------------------------------------------------------
				; int ispunct(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character
				; is a punctuation character.

 01B5				ispunct PROC var:PTR BYTE
 01B8  8B 46 04			    mov ax, var

				    .IF ax >= 33 && ax <= 47					; If input is punctuation return 16
 01C5  B8 0010				mov ax, 16
				    .ELSEIF ax >= 58 && ax <= 64				; If input is punctuation return 16
 01D4  B8 0010				mov ax, 16
				    .ELSEIF ax >= 91 && ax <= 96				; If input is punctuation return 16
 01E3  B8 0010				mov ax, 16
				    .ELSEIF ax >= 123 && ax <= 126				; If input is punctuation return 16
 01F2  B8 0010				mov ax, 16
				    .ELSE
 01F7  B8 0000				mov ax, 0						; Return 0 on non printable char
				    .ENDIF

				    ret
 01FC				ispunct ENDP


				; ------------------------------------------------------------------
				; int isspace(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character is white-space.

 01FC				isspace PROC var:PTR BYTE
 01FF  8B 46 04			    mov ax, var

				    .IF ax >= 9 && ax <= 13					; If input is white-space return 16
 020C  B8 0008				mov ax, 8
				    .ELSEIF ax == 32						; If input is white-space return 16
 0216  B8 0008				mov ax, 8
				    .ELSE
 021B  B8 0000				mov ax, 0						; Return 0 on non printable char
				    .ENDIF

				    ret
 0220				isspace ENDP


				; ------------------------------------------------------------------
				; int isupper(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character
				; is an uppercase letter.

 0220				isupper PROC var:PTR BYTE
 0223  8B 46 04			    mov ax, var

				    .IF ax >= 65 && ax <= 90					; If input is uppercase char return 1
 0230  B8 0001				mov ax, 1
				    .ELSE
 0235  B8 0000				mov ax, 0						; Return 0 on non uppercase
				    .ENDIF

				    ret
 023A				isupper ENDP


				; ------------------------------------------------------------------
				; int isxdigit(int c)
				; ------------------------------------------------------------------
				; This function checks whether the passed character
				; is a hexadecimal digit.

 023A				isxdigit PROC var:PTR BYTE
 023D  8B 46 04			    mov ax, var

				    .IF ax >= 48 && ax <= 57					; If input is a hexadecimal digit return 128
 024A  B8 0080			    	mov ax, 128
				    .ELSEIF ax >= 65 && ax <= 70				; If input is a hexadecimal digit return 128
 0259  B8 0080			    	mov ax, 128
				    .ELSEIF ax >= 97 && ax <= 102				; If input is a hexadecimal digit return 128
 0268  B8 0080			    	mov ax, 128
				    .ELSE
 026D  B8 0000			    	mov ax, 0						; Return 0 on non uppercase
				    .ENDIF

				    ret
 0272				isxdigit ENDP


				; ------------------------------------------------------------------
				; int tolower(int c)
				; ------------------------------------------------------------------
				; This function converts uppercase letters to lowercase.

 0272				tolower PROC var:PTR BYTE
 0275  8B 46 04			    mov ax, var

				    .IF ax >= 65 && ax <= 90
 0282  83 C0 20				add ax, 32
				    .ENDIF

				    ret
 0287				tolower  ENDP


				; ------------------------------------------------------------------
				; int toupper(int c)
				; ------------------------------------------------------------------
				; This function converts lowercase letters to uppercase .

 0287				toupper PROC var:PTR BYTE
 028A  8B 46 04			    mov ax, var

				    .IF ax >= 97 && ax <= 122
 0297  83 E8 20				sub ax, 32
				    .ENDIF

				    ret
 029C				toupper  ENDP

				END
Microsoft (R) Macro Assembler Version 6.15.8803		    08/27/17 03:46:03
src\ctype.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

tm . . . . . . . . . . . . . . .	 0012
  tm_sec . . . . . . . . . . . .	 0000	     Word
  tm_min . . . . . . . . . . . .	 0002	     Word
  tm_hour  . . . . . . . . . . .	 0004	     Word
  tm_mday  . . . . . . . . . . .	 0006	     Word
  tm_mon . . . . . . . . . . . .	 0008	     Word
  tm_year  . . . . . . . . . . .	 000A	     Word
  tm_wday  . . . . . . . . . . .	 000C	     Word
  tm_yday  . . . . . . . . . . .	 000E	     Word
  tm_isdst . . . . . . . . . . .	 0010	     Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_TEXT  . . . . . . . . . . . . .	16 Bit	 029C	  Word	  Public  'CODE'	
_DATA  . . . . . . . . . . . . .	16 Bit	 0000	  Word	  Public  'DATA'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

_assert  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
bcd  . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
clrscr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cprintf  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cputsxy  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cputs  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cscanf . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cursoroff  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
cursoron . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
delay  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
drawline . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
getchar  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
getche . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
getch  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
gets . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
gotoxy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
highvideo  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
insline  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
isalnum  . . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 0038 Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
isalpha  . . . . . . . . . . . .	P Near	 0038	  _TEXT	Length= 0029 Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
iscntrl  . . . . . . . . . . . .	P Near	 0061	  _TEXT	Length= 002E Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
isdigit  . . . . . . . . . . . .	P Near	 008F	  _TEXT	Length= 001A Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
isgraph  . . . . . . . . . . . .	P Near	 00A9	  _TEXT	Length= 0074 Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
islower  . . . . . . . . . . . .	P Near	 011D	  _TEXT	Length= 001A Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
isprint  . . . . . . . . . . . .	P Near	 0137	  _TEXT	Length= 007E Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
ispunct  . . . . . . . . . . . .	P Near	 01B5	  _TEXT	Length= 0047 Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
isspace  . . . . . . . . . . . .	P Near	 01FC	  _TEXT	Length= 0024 Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
isupper  . . . . . . . . . . . .	P Near	 0220	  _TEXT	Length= 001A Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
isxdigit . . . . . . . . . . . .	P Near	 023A	  _TEXT	Length= 0038 Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
kbhit  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
localtime  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
lowvideo . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
memchr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
memcmp . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
memcpy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
memmove  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
memset . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
newline  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
printf . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
putchar  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
putch  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
puts . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
raise  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
scanf  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
setcursortype  . . . . . . . . .	P Near	 0000	  Length= 0000 External C
signal . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strcat . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strchr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strcmp . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strcoll  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strcpy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strcspn  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strlen . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strncat  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strncmp  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strncpy  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strpbrk  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strrchr  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strspn . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strstr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strtok . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
strxfrm  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
textbackground . . . . . . . . .	P Near	 0000	  Length= 0000 External C
textcolor  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
tolower  . . . . . . . . . . . .	P Near	 0272	  _TEXT	Length= 0015 Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
toupper  . . . . . . . . . . . .	P Near	 0287	  _TEXT	Length= 0015 Public C
  var  . . . . . . . . . . . . .	Word	 bp + 0004
ungetch  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
wherex . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C
wherey . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0001h	 
@Model . . . . . . . . . . . . .	Number	 0001h	 
@code  . . . . . . . . . . . . .	Text   	 DGROUP
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
BUFSIZ . . . . . . . . . . . . .	Number	 1000h	 
FILENAME_MAX . . . . . . . . . .	Number	 000Bh	 
NSIG . . . . . . . . . . . . . .	Number	 0017h	 
SIGABRT  . . . . . . . . . . . .	Number	 0016h	 
SIGBREAK . . . . . . . . . . . .	Number	 0015h	 
SIGFPE . . . . . . . . . . . . .	Number	 0008h	 
SIGILL . . . . . . . . . . . . .	Number	 0004h	 
SIGINT . . . . . . . . . . . . .	Number	 0002h	 
SIGSEGV  . . . . . . . . . . . .	Number	 000Bh	 
SIGTERM  . . . . . . . . . . . .	Number	 000Fh	 
_ASSERT_ . . . . . . . . . . . .	Text   	 1
_CONIO_  . . . . . . . . . . . .	Text   	 1
_CTYPE_  . . . . . . . . . . . .	Text   	 1
_SIGNAL_ . . . . . . . . . . . .	Text   	 1
_STDBOOL_  . . . . . . . . . . .	Text   	 1
_STDIO_  . . . . . . . . . . . .	Text   	 1
_STRING_ . . . . . . . . . . . .	Text   	 1
_TIME_ . . . . . . . . . . . . .	Text   	 1
false  . . . . . . . . . . . . .	Number	 0000h	 
true . . . . . . . . . . . . . .	Number	 0001h	 

	   0 Warnings
	   0 Errors
